<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="SoapUI Groovy Script Library" resourceRoot="" soapui-version="5.2.1" id="61e618be-812a-4598-8c88-14d4c02b865a" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://api.mockservice.co.nz" type="rest" id="9bba0f31-23fb-498f-9ea7-b73c0a17d2f7" basePath="/account" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://192.168.100.15</con:endpoint><con:endpoint>http://192.168.105.150:22</con:endpoint><con:endpoint>http://localhost:8082</con:endpoint><con:endpoint>https://esapi1.cat.mylotto.co.nz</con:endpoint><con:endpoint>https://esapi3.cat.mylotto.co.nz</con:endpoint></con:endpoints><con:resource name="login" path="login" id="b9be42ab-e54e-4f83-a78a-e25f39a25d39"><con:settings/><con:parameters><con:parameter><con:name>reply_callback</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Login" id="5cd9acea-3570-47cf-9c15-d255ea6c3f7b" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/account/login">log:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Login sucessfully" id="fbe995a6-ed9c-40de-af05-9dd777b7a982" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{"username":"LolaYan@test.com","password":"password1"}</con:request><con:originalUri>http://localhost/account/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:request><con:request name="Login with wrong password" id="2719191b-b8aa-4b10-a22e-cbf0ff33c762" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{"username":"LolaYan@test.com", "password":"wrongpassword"}</con:request><con:originalUri>http://192.168.100.15/account/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:request><con:request name="Login without parameters" id="26bc4dae-455f-4c34-9a2e-8cb1cd866489" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/account/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:request></con:method><con:method name="Login 2" id="5cd9acea-3570-47cf-9c15-d255ea6c3f7b" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/account/login">log:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=ISO-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Login sucessfully" id="fbe995a6-ed9c-40de-af05-9dd777b7a982" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8999</con:endpoint><con:request>{"username":"LolaYan@test.com","password":"password1"}</con:request><con:originalUri>http://localhost/account/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:request><con:request name="Login with wrong password" id="2719191b-b8aa-4b10-a22e-cbf0ff33c762" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{"username":"LolaYan@test.com", "password":"wrongpassword"}</con:request><con:originalUri>http://192.168.100.15/account/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:request><con:request name="Login without parameters" id="26bc4dae-455f-4c34-9a2e-8cb1cd866489" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/account/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="logout" path="logout" id="41c318f7-7e2d-4ec7-941c-0c8105a76834"><con:settings/><con:parameters><con:parameter><con:name>sessionid</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>userid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Logout" id="5117cd74-2971-477d-9ed8-d2ad7d9e62f8" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Logout successfully" id="9e2263c4-038e-475e-a7d1-75bb931571c9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/account/logout</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="userid" value="21312312"/>
  <con:entry key="sessionid" value="EFAEFEFEFEFEFEF"/>
</con:parameters><con:parameterOrder><con:entry>userid</con:entry><con:entry>sessionid</con:entry></con:parameterOrder></con:request><con:request name="Logout invalid sessionid" id="9e2263c4-038e-475e-a7d1-75bb931571c9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/account/logout</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="userid" value="21312312"/>
  <con:entry key="sessionid" value="123456"/>
</con:parameters><con:parameterOrder><con:entry>userid</con:entry><con:entry>sessionid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="ping" path="/ping" id="b79ddd1e-f9f4-4a7d-8a3d-28fbe15ec064"><con:settings/><con:parameters><con:parameter><con:name>userid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="9dbd062b-a9cf-43c7-9bd8-d59290e48702" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ping="http://192.168.100.15/account/account/ping">ping:Response</con:element></con:representation><con:request name="Request 1" id="3d1e4166-e4d7-44d0-83ec-21c83f24b910" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SessionId" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://192.168.100.15</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>userid</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="bd880452-2f6c-4e0c-bb6b-dbe1adca80ac" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://api.xero.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://api.xero.com</con:endpoint></con:endpoints><con:resource name="RequestToken" path="/oauth/RequestToken" id="31764140-c1be-4233-b13a-7aa36669036a"><con:settings/><con:parameters><con:parameter><con:name>oauth_callback</con:name><con:value>http://development.xxxxxxxx.com:443/~daniel/oauth/xero/public.php</con:value><con:style>QUERY</con:style><con:default>http://development.xxxxxxxx.com:443/~daniel/oauth/xero/public.php</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oauth_consumer_key</con:name><con:value>xxxxxxxx</con:value><con:style>QUERY</con:style><con:default>xxxxxxxx</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oauth_nonce</con:name><con:value>51bxw</con:value><con:style>QUERY</con:style><con:default>51bxw</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oauth_signature</con:name><con:value>zBZsbL06e132psC6a8wHZ0UybnA=</con:value><con:style>QUERY</con:style><con:default>zBZsbL06e132psC6a8wHZ0UybnA=</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oauth_signature_method</con:name><con:value>HMAC-SHA1</con:value><con:style>QUERY</con:style><con:default>HMAC-SHA1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oauth_timestamp</con:name><con:value>1373269108</con:value><con:style>QUERY</con:style><con:default>1373269108</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>oauth_version</con:name><con:value>1.0</con:value><con:style>QUERY</con:style><con:default>1.0</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>order</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="RequestToken" id="96f2e853-19ce-4a58-a3f9-63dc14bb45d4" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="3679aa0b-49a1-4a53-847c-879238c6dcb6" mediaType="application/json"><con:settings/><con:endpoint>https://api.xero.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>oauth_callback</con:entry><con:entry>oauth_consumer_key</con:entry><con:entry>oauth_nonce</con:entry><con:entry>oauth_signature</con:entry><con:entry>oauth_signature_method</con:entry><con:entry>oauth_timestamp</con:entry><con:entry>oauth_version</con:entry><con:entry>order</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Authorize" path="/oauth/Authorize" id="90ec47c7-c5b0-4775-beb4-538a8f2d1775"><con:settings/><con:parameters><con:parameter><con:name>oauth_token</con:name><con:value>B2MPRXF2S60QIVUCUIUJBVI8WHY93A</con:value><con:style>QUERY</con:style><con:default>B2MPRXF2S60QIVUCUIUJBVI8WHY93A</con:default></con:parameter><con:parameter><con:name>oauth_callback</con:name><con:value>http://1-dot-xerojavasample-1342.appspot.com/oauth2callback</con:value><con:style>QUERY</con:style><con:default>http://1-dot-xerojavasample-1342.appspot.com/oauth2callback</con:default></con:parameter></con:parameters><con:method name="Authorize" id="9cafa0a2-3b61-4dbf-bb52-39e8c7a2f5b5" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="0b37d8f7-f314-424d-954e-6272ae573219" mediaType="application/json"><con:settings/><con:endpoint>https://api.xero.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="Script Library" id="bac77088-326c-44b1-92e0-e046646251f2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Data Source and Data Loop" searchProperties="true" id="87db2bd5-64a8-4864-8ca0-7c0e7702dcd8"><con:settings/><con:testStep type="groovy" name="data driver" id="2a4f05f4-7024-4c76-8ccb-96e0f7c4b986"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder 
import jxl.* 
import jxl.write.*

/**
 * JXL library doesnot support .csv and .xslx formats, which is the format used by Excel-2010. 
 * Hence, use Excel 97-2003 which is .xsl foramatted and is supported by JXL library. 
 * Or else if you want to use excel-2010, use APACHE POI(XSSFWorkbooks) instead of JXL. 
 * For using .csv format, google for CSVReader libraries.
**/

/* DECLARE THE VARIABLES */
//myTestCase contains the test case
def myTestCase = context.testCase; 

//Variables used to handle the loop and to move inside the file
def counter,next,previous,size;

def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath;
def folderDir =  projectDir+"/data" ;
def fileDir = new File(folderDir+"/UserData.xls");

Workbook workbook1 = Workbook.getWorkbook(fileDir) //file containing the data 
Sheet sheet1 = workbook1.getSheet(0) //save the first sheet in sheet1 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
//Set the total number of data in data file to '${Property – Looper#Total}'
propTestStep.setPropertyValue("Total", size.toString())

//Get the count from "Property – Looper", which means the current data line number.
counter = propTestStep.getPropertyValue("Count").toString()
counter= counter.toInteger()
 
//set the next value
next = (counter > size-2? 0: counter+1)
// OBTAINING THE DATA YOU NEED

//obtains user
Cell u = sheet1.getCell(0,counter) // getCell(column,row)  
Cell p = sheet1.getCell(1,counter) // obtains password
 
workbook1.close() //close the file

usr = u.getContents() 
pass = p.getContents()
 
propTestStep.setPropertyValue("user", usr) //the value is saved in the property 
propTestStep.setPropertyValue("pass", pass) //the value is saved in the property 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter == size-1) 
{
	propTestStep.setPropertyValue("StopLoop", "T");
	log.info "Setting the stoploop property now..."; 
}else if (counter==0) 
{
	def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null);
	propTestStep.setPropertyValue("StopLoop", "F"); 
}else
{
	propTestStep.setPropertyValue("StopLoop", "F"); 
}</script></con:config></con:testStep><con:testStep type="properties" name="Property – Looper" id="d3529678-8564-4e2a-9284-c517352a352a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user</con:name><con:value>test2591868lotto@test.com</con:value></con:property><con:property><con:name>pass</con:name><con:value>Password1</con:value></con:property><con:property><con:name>Total</con:name><con:value>81</con:value></con:property><con:property><con:name>Count</con:name><con:value>0</con:value></con:property><con:property><con:name>Next</con:name><con:value>1</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="loop" id="75678ea6-1b80-468d-b2c9-cec12bb68eee"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()

log.info propTestStep.getPropertyValue("user").toString()
log.info propTestStep.getPropertyValue("pass").toString()

if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
 
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("data driver") //setStartStep
 
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TXT Data Source and Data Loop" searchProperties="true" id="a29cdf1a-3a84-4c8d-965e-6b0ac2a2b896"><con:settings/><con:testStep type="groovy" name="Groovy Script – DataSource" id="778bd0a7-3f98-4785-8ffc-c0f4d85ff502"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
def myTestCase = context.testCase
def counter,next,previous,size

File tickerEnumFile = new File("C:/Data/InputData.txt") //make sure input.txt file already exists and contains different set of values sepearted by new line (CR).
//Read data from data file, import them into List
List lines = tickerEnumFile.readLines()
size = lines.size.toInteger()

propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
//Set the total number of data in data file to '${Property – Looper#Total}'
propTestStep.setPropertyValue("Total", size.toString())

//Get the count from "Property – Looper", which means the current data line number.
counter = propTestStep.getPropertyValue("Count").toString()
counter= counter.toInteger()

//if count is the second last line, set 'next' as 0. Otherwise, set is as count+1
next = (counter > size-2? 0: counter+1)

//read specific no. 'counter' line data from 'List'
tempValue = lines[counter]
propTestStep.setPropertyValue("Value", tempValue)

//After read the no. 'counter' line data, set 'Count' as 'counter'+1
propTestStep.setPropertyValue("Count", next.toString())

//plus 1 for 'next' no
next++
log.info "Reading line : ${(counter+1)} / $lines.size"

propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"

if (counter == size-1)
{
	propTestStep.setPropertyValue("StopLoop", "T")
	log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
	def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
	propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
	propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Property – Looper" id="6ad126db-d618-4add-bdbb-6cc9fbbeddcd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Total</con:name><con:value>5</con:value></con:property><con:property><con:name>Value</con:name><con:value>test5</con:value></con:property><con:property><con:name>Count</con:name><con:value>0</con:value></con:property><con:property><con:name>Next</con:name><con:value>1</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script – Data Loop" id="2b549d03-143e-41eb-96f7-5463829a054b"><con:settings/><con:config><script>/*&lt;/pre>
@Author : Pradeep Bishnoi
@Description : Data Source Looper responsible for looping a specific teststep.
@GroovyTestStepName : "Groovy Script - Data Loop"
*/
def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Property – Looper") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
log.info endLoop.toString()
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("Groovy Script – DataSource") //setStartStep
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reporting" searchProperties="true" id="744d074e-7299-4248-9d2d-95b0f6b6ed97"><con:settings/><con:testStep type="groovy" name="TestCaseResultsCSVReport" id="30af16b7-464e-4ec3-8430-7bd6dd7429d5"><con:settings/><con:config><script>try {
        	//The path and file to persist results
		def resultDir = new File("C:\\Data");
		if(!resultDir.exists()) 
		{
          	resultDir.mkdirs();
        	}
        	def resultsFile = new File(resultDir, "PerfData.csv");
        	
        	//If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) 
        {
        		resultsFile.createNewFile();
            	//Header values
            	resultsFile.append('"Mobile_Number","First_Name","wager_amount","dip_name","favourite_name","opted_game_id"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"Test Case Name: ' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"Test Case Result: ' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
        		def stepName = result.testStep.label
        		def stepResult = result.getStatus()
        		resultsFile.append('\n');    //Newline
        		resultsFile.append('"Test Step Name: ' + stepName + '",\n'); 
        		resultsFile.append('"Test Step Result: ' + stepResult + '",\n');

        		if ( result.getStatus().toString() == 'FAILED' ){
        			finalResult = "FAIL";
        		}else{
        			finalResult = "PASS";
        		}
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                
                resultsFile.append('Msg'+ msgCount +": "+ message + ';\n');
                msgCount++;
               
            }
        }

        resultsFile.append('",\n');    //End of messages.
        resultsFile.append(currentDate + ': Test Case END!\n');
        resultsFile.append('"Test Result: ' + finalResult + '",\n');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</script></con:config></con:testStep><con:testStep type="groovy" name="TestCaseResultsLog" id="bb0badcf-7275-4a37-8fa4-119d747eaaef"><con:settings/><con:config><script>try {
	def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");
    
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#Project#ProduceReports}') == 'true') 
    {
        //The path and file to persist results
		def resultDir = new File("C:\\Users\\user\\Temp\\SoapUIResults");
		if(!resultDir.exists()) 
		{
          	resultDir.mkdirs();
        	}
        	//def resultsFile = new File(resultDir, "CSVReport.csv");
		def resultsFile = new File(resultDir, "testResultsReport.txt");
        
        	//If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"Test Case Name: ' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"Test Case Result: ' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
        		def stepName = result.testStep.label
        		//def stepResult = result.status 
        		def stepResult = result.getStatus()
        		resultsFile.append('\n');    //Newline
        		resultsFile.append('"Test Step Name: ' + stepName + '",\n'); 
        		resultsFile.append('"Test Step Result: ' + stepResult + '",\n');
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                
                resultsFile.append('Msg'+ msgCount +": "+ message + ';\n');
                msgCount++;
               
            }
        }

        resultsFile.append('",');    //End of messages.
        resultsFile.append(currentDate + ': Test Case END!');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</script></con:config></con:testStep><con:testStep type="groovy" name="TestCaseResultsLog TearDown" id="5f5f350e-b1bf-411e-8f72-d2742cf66314"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.testSuites["Script Library"].testCases["Reporting"].testSteps["TestCaseResultsCSVReport"].run(testRunner, context);
testRunner.testCase.testSuite.project.testSuites["Script Library"].testCases["Reporting"].testSteps["TestCaseResultsLog"].run(testRunner, context);</script></con:config></con:testStep><con:testStep type="groovy" name="Populate TestCase TearDown Script" id="e6625bc8-073a-46f9-a75f-6e4d975832d0"><con:settings/><con:config><script>try {
    def tearDown = testRunner.testCase.testSteps["TestCaseResultsLog TearDown"].getScript();

    def project = testRunner.testCase.testSuite.project;

    //Loop through each Test Suite
    for(suite in project.getTestSuiteList()) 
    {
        //Do not want to add script to test cases in Scripts Suite.
        if(!suite.name.startsWith("Script Library")) 
        {
            //Loop through each Test Case
            for(tcase in suite.getTestCaseList()) 
            {
                tcase.setTearDownScript(tearDown);
            }
        }
    }
} catch(e) {
    log.error(e.toString());
}</script></con:config></con:testStep><con:testStep type="groovy" name="PreTestCaseResultsLog" id="31a752db-620c-4810-8be7-6bfb4c323256"><con:settings/><con:config><script>try {
	def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");
    
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#Project#ProduceReports}') == 'true') 
    {
        //The path and file to persist results
		def resultDir = new File("C:\\Users\\user\\Temp\\SoapUIResults");
		if(!resultDir.exists()) 
		{
          	resultDir.mkdirs();
        	}
        	//def resultsFile = new File(resultDir, "CSVReport.csv");
		def resultsFile = new File(resultDir, "testResultsReport.txt");
  

		def currentStep = context.getCurrentStep();
		def currentTestCase = currentStep.testCase;
		def currentTestSuite = currentTestCase.testSuite;
		def currentProject = currentTestSuite.project;
		
        //Write the result values
        resultsFile.append('\n');
        resultsFile.append( currentDate +": Start executing step - " + currentProject.getName() +">"+ currentTestSuite.getName() +">"+ currentTestCase.getName() +">"+currentStep.getName());
        
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</script></con:config></con:testStep><con:testStep type="groovy" name="PreTestCaseResultsCSVReport" id="98f7dddf-8f76-47ec-addf-2f1c8237b027"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="TestCaseResultsLog SetUp" id="21a52586-405c-4478-81de-dafe137a1393"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.testSuites["Script Library"].testCases["Reporting"].testSteps["PreTestCaseResultsLog"].run(testRunner, context);</script></con:config></con:testStep><con:testStep type="groovy" name="Populate TestCase SetUp Script" id="dfe98625-1c7a-4fcd-821b-c6b8c6401aca"><con:settings/><con:config><script>try {
    def SetUp = testRunner.testCase.testSteps["TestCaseResultsLog SetUp"].getScript();

    def project = testRunner.testCase.testSuite.project;

    //Loop through each Test Suite
    for(suite in project.getTestSuiteList()) 
    {
        //Do not want to add script to test cases in Scripts Suite.
        if(!suite.name.startsWith("Script Library")) 
        {
            //Loop through each Test Case
            for(tcase in suite.getTestCaseList()) 
            {
                tcase.setSetupScript(SetUp);
            }
        }
    }
} catch(e) {
    log.error(e.toString());
}</script></con:config></con:testStep><con:tearDownScript/><con:properties/></con:testCase><con:testCase id="4e2260f5-2610-4e9e-9247-7e01331d50c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate NZ Bank Account" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate NZ Bank Account" id="609a13d2-00ec-42e0-bfa9-91cce6ea9b6e"><con:settings/><con:config><script>context.setProperty("GetAccountNumber", new GetAccountNumber());

class GetAccountNumber{

    
    def GetBankAccountNumber()
    {
    	def BankCodeArr=[1, 2, 3, 6, 8, 11 ];
    	def ArrLen=BankCodeArr.size();
    	def index=GetRandomNumber(1,ArrLen);
    	def bankCode=BankCodeArr.getAt(index-1);
    	def bankBranch=1000;
    	def AccountBaseNumber=GetAccountBaseNumber();
    	def AccountBodyNumber;
    	AccountBodyNumber=BankAccountAlgorithmB(AccountBaseNumber);
    	switch (bankCode)
    	{
    		case 1:
			bankBranch=GetRandomNumber(1,999);
			AccountBodyNumber=BankAccountAlgorithmB(AccountBaseNumber);
    			break
    		case 2:
    			bankBranch=GetRandomNumber(1,999);
    			break
    		case 3:
			bankBranch=GetRandomNumber(1,999);
    			break
    		case 6:
    			bankBranch=GetRandomNumber(1,999);
    			break
    		case 8:
			bankBranch=GetRandomNumber(6500,6599);
			AccountBodyNumber=BankAccountAlgorithmD(AccountBaseNumber);
    			break
    		case 11:
			bankBranch=GetRandomNumber(5000,6499);
    			break
    		default:
    			bankCode=12;
    			bankBranch=GetRandomNumber(3000,3299);
    			break
    	}
    	/**/
    	def bankCodeStr=LeftPaddingZero(bankCode,2);
    	def bankBranchStr=LeftPaddingZero(bankBranch,4);
    	def AccountBodyNumberStr=AccountBodyNumber.toString();
    	def bankSuffix="000";
    	def bankPrefix=bankCodeStr+bankBranchStr;
    	def BankAccountNumber = bankPrefix+AccountBodyNumberStr+bankSuffix;
    	return BankAccountNumber;
    }

    
    def GetAccountBaseNumber()
    {
    	def AccountBaseNumber=GetRandomNumber(100000,999999);
    	return AccountBaseNumber
    }

    def BankAccountAlgorithmB(dig)
    {
    	//Sure that the length of AccountBase number is 6
    	def digStr=dig.toString();
    	//digStr=LeftPaddingZero(digStr,6)
    	def len = digStr.size();
    	def WeightNumberArr=[0, 10, 5, 8, 4, 2, 1 ];
    	def sum = 0, rem = 0, baseNum = 0, weightNum = 0, USum = 0, checkDig = 0;
    	def validator;

    	for(int i = 1; i &lt;= len; i++)
    	{
    		baseNum = digStr.substring(i-1,i).toInteger();
    		weightNum = WeightNumberArr.getAt(i-1).toInteger();
    		USum = baseNum*weightNum;
    		sum +=USum;

    	}
    	rem = sum % 11
    	checkDig=11-rem

    	if(rem==0)
    	{
    		validator="0";
    	}else if(rem==1){
    		validator="X";
    	}else{
    		validator=checkDig.toString();
    	}

    	return digStr+validator
    }

    def BankAccountAlgorithmD(dig)
    {
    	def digStr=dig.toString();
    	//digStr=LeftPaddingZero(digStr,6)
    	def len = digStr.size();
    	def WeightNumberArr=[7, 6, 5, 4, 3, 2, 1 ];
    	def sum = 0, rem = 0, baseNum = 0, weightNum = 0, USum = 0, checkDig = 0;
    	def validator;

    	for(int i = 1; i &lt;= len; i++)
    	{
    		baseNum = digStr.substring(i-1,i).toInteger();
    		weightNum = WeightNumberArr.getAt(i-1).toInteger();
    		USum = baseNum*weightNum;
    		sum +=USum;

    	}
    	rem = sum % 11
    	checkDig=11-rem

    	if(rem==0)
    	{
    		validator="0";
    	}else if(rem==1){
    		validator="X";
    	}else{
    		validator=checkDig.toString();
    	}

    	return digStr+validator
    }
    def GetRandomNumber(min,max)
    {
    	 def n=Math.abs(new Random().nextInt() % (max-min)) + min;
    	 return n;
    }
	
    def LeftPaddingZero(value,length)
    {
    	def valueStr=value.toString();
    	def res=valueStr.padLeft(length, '0');
    	return res;
    }
}

def bankAccount=context.GetAccountNumber.GetBankAccountNumber();
//log.info bankAccount;
testRunner.testCase.setPropertyValue( 'acctNumber',bankAccount);</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script - Bank Account Geberator Class" id="3a87e497-ffa3-4469-8d94-f0cc34303f6d"><con:settings/><con:config><script>public class BankAccountBase {
	public static String BankIDStr;
	public static String BankBranchStr;
	public static String AlgorithmType;
	public static String AlgorithmMod;
	public static String checkDigit;
	public static String BankAccountBaseStr;
	public static String suffixStr;
	public static String BankAccountStr;
	public static int[] algorithmWeight;

	public static String accountBaseLengthSetting = "7";
	public static String suffixSetting = "000";

	public static int RandomNumber(int min, int max) {
		int res = (int) (min + (Math.random() * (max - min)));
		return res;
	}

	public static String PaddingLeftWithZero(int num, int length) {
		def valueStr=num.toString();
    		def res=valueStr.padLeft(length, '0');
    		return res;
		
	}

	public static String PaddingLeftWithZero(String num, int length) {
		
		def res=num.padLeft(length, '0');
    		return res;
	}

	public static String doMod() {
		checkDigit = "N/A"
		while (checkDigit.equals("N/A"))
		{
			getBankAccountBaseStr();

			String tempBankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr;
			// validate the length of BankAccountStr is 2+4+7 = 13
			// get AlgorithmWeight
			algorithmWeight = GetAlgorithmWeight(AlgorithmType);
			if (AlgorithmType.equals("A") || AlgorithmType.equals("B")
					|| AlgorithmType.equals("C") || AlgorithmType.equals("D")) {

				checkDigit = GetCheckDigit_Mod11(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("E")) {
				tempBankAccountStr = tempBankAccountStr + suffixStr;
				checkDigit = GetCheckDigit_Mod11(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("F")) {
				checkDigit = GetCheckDigit_Mod10(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("G")) {
				tempBankAccountStr = tempBankAccountStr + suffixStr;
				checkDigit = GetCheckDigit_Mod10(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("X")) {
				AlgorithmMod = "Mod 1";
				checkDigit = Integer.toString(RandomNumber(0, 9));
			}

			if(checkDigit.equals("N/A") == false) break
		}

		if (AlgorithmType.equals("E") || AlgorithmType.equals("G")) {

			suffixStr = suffixStr + checkDigit;
			//get the last digit of suffixStr
			suffixStr = suffixStr.substring(suffixStr.length()-3,suffixStr.length())
		} else {
			BankAccountBaseStr = BankAccountBaseStr + checkDigit;
			checkSuffixSetting();
		}

		checkAccountBaseLengthSetting();
		BankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr + suffixStr;

		return BankAccountStr;
	}

	// If AlgorithmType is E or G, return the account base and first 3 digit of
	// suffix.
	// If AlgorithmType is others, return first 7 digit of the account base and
	// first 3 digit of suffix.
	public static void getBankAccountBaseStr() {
		int ranNoBankAccountBase;
		int ranNoSuffix;

		if (AlgorithmType.equals("E") || AlgorithmType.equals("G")) {
			ranNoBankAccountBase = RandomNumber(0, 9999999);
			BankAccountBaseStr = PaddingLeftWithZero(ranNoBankAccountBase, 8);

			ranNoSuffix = RandomNumber(0, 99);
			suffixStr = PaddingLeftWithZero(ranNoSuffix, 3);

		} else {
			ranNoBankAccountBase = RandomNumber(0, 999999);
			BankAccountBaseStr = PaddingLeftWithZero(ranNoBankAccountBase, 7);

			ranNoSuffix = RandomNumber(0, 9999);
			suffixStr = PaddingLeftWithZero(ranNoSuffix, 4);
		}

		setAlgorithmBasedonAccountBase(ranNoBankAccountBase);
		// After setAlgorithmBasedonAccountBase(), the AlgorithmType should be
		// set up.

	}

	public static void setAlgorithmBasedonAccountBase(int accountBase) {
		if (AlgorithmType.equals("Unkown")) {
			if (accountBase &lt; 99000) {
				AlgorithmType = "A";

			} else {
				AlgorithmType = "B";
			}
		}
	}

	public static String getBankID() {
		String[] BankIDArr = [ "01", "02", "03", "06", "08", "09", "11", "12",
				"13", "14", "15", "16", "17", "18", "19", "20", "21", "22",
				"23", "24", "25", "26", "27", "28", "29", "30", "31", "33",
				"35", "38" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID(String type) {
		switch (type) {
		case "A":
			BankIDStr = getBankID_AB();
			break;
		case "B":
			BankIDStr = getBankID_AB();
			break;
		case "D":
			BankIDStr = getBankID_D();
			break;
		case "E":
			BankIDStr = getBankID_E();
			break;
		case "F":
			BankIDStr = getBankID_F();
			break;
		case "G":
			BankIDStr = getBankID_G();
			break;
		case "X":
			BankIDStr = getBankID_X();
			break;
		default:
			BankIDStr = getBankID_AB();
			break;
		}
		return BankIDStr;
	}

	public static String getBankID_AB() {
		String[] BankIDArr = [ "01", "02", "03", "06", "11", "12", "13", "14",
				"15", "16", "17", "18", "19", "20", "21", "22", "23", "24",
				"27", "30", "35", "38" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID_D() {
		BankIDStr = "08";
		return BankIDStr;
	}

	public static String getBankID_E() {
		BankIDStr = "09";
		return BankIDStr;
	}

	public static String getBankID_F() {
		String[] BankIDArr = [ "25", "33" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID_G() {
		String[] BankIDArr = [ "26", "28", "29" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID_X() {
		BankIDStr = "31";
		return BankIDStr;
	}

	public static String getBankBranch(String BankIDStr) {
		int BankBranch;
		String BankBranchStr;
		// String BankIDStr = PaddingLeftWithZero(BankID,2);
		int i;
		AlgorithmType = "Unkown";
		switch (BankIDStr) {
		case "01":
			i = RandomNumber(1, 3);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else if (i == 2) {
				BankBranch = RandomNumber(1100, 1199);
			} else {
				BankBranch = RandomNumber(1800, 1899);
			}
			break;
		case "02":
			i = RandomNumber(1, 2);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else {
				BankBranch = RandomNumber(1200, 1299);
			}
			break;
		case "03":
			i = RandomNumber(1, 5);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else if (i == 2) {
				BankBranch = RandomNumber(1300, 1399);
			} else if (i == 3) {
				BankBranch = RandomNumber(1500, 1599);
			} else if (i == 4) {
				BankBranch = RandomNumber(1700, 1799);
			} else {
				BankBranch = RandomNumber(1900, 1999);
			}
			break;
		case "06":
			i = RandomNumber(1, 2);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else {
				BankBranch = RandomNumber(1400, 1499);
			}
			break;
		case "08":
			BankBranch = RandomNumber(6500, 6599);
			AlgorithmType = "D";
			break;
		case "09":
			BankBranch = 0;
			AlgorithmType = "E";
			break;
		case "11":
			i = RandomNumber(1, 2);
			if (i == 1) {
				BankBranch = RandomNumber(5000, 6499);
			} else {
				BankBranch = RandomNumber(6600, 8999);
			}
			break;
		case "12":
			i = RandomNumber(1, 3);
			if (i == 1) {
				BankBranch = RandomNumber(3000, 3299);
			} else if (i == 2) {
				BankBranch = RandomNumber(3400, 3499);
			} else {
				BankBranch = RandomNumber(3600, 3699);
			}
			break;
		case "13":
			BankBranch = RandomNumber(4900, 4999);
			break;
		case "14":
			BankBranch = RandomNumber(4700, 4799);
			break;
		case "15":
			BankBranch = RandomNumber(3900, 3999);
			break;
		case "16":
			BankBranch = RandomNumber(4400, 4499);
			break;
		case "17":
			BankBranch = RandomNumber(3300, 3399);
			break;
		case "18":
			BankBranch = RandomNumber(3500, 3599);
			break;
		case "19":
			BankBranch = RandomNumber(4600, 4649);
			break;
		case "20":
			BankBranch = RandomNumber(4100, 4199);
			break;
		case "21":
			BankBranch = RandomNumber(4800, 4899);
			break;
		case "22":
			BankBranch = RandomNumber(4000, 4049);
			break;
		case "23":
			BankBranch = RandomNumber(3700, 3799);
			break;
		case "24":
			BankBranch = RandomNumber(4300, 4399);
			break;
		case "25":
			BankBranch = RandomNumber(2500, 2599);
			AlgorithmType = "F";
			break;
		case "26":
			BankBranch = RandomNumber(2600, 2699);
			AlgorithmType = "G";
			break;
		case "27":
			BankBranch = RandomNumber(3800, 3849);
			break;
		case "28":
			BankBranch = RandomNumber(2100, 2149);
			AlgorithmType = "G";
			break;
		case "29":
			BankBranch = RandomNumber(2150, 2299);
			AlgorithmType = "G";
			break;
		case "30":
			BankBranch = RandomNumber(2900, 2949);
			break;
		case "31":
			BankBranch = RandomNumber(2800, 2849);
			AlgorithmType = "X";
			break;
		case "33":
			BankBranch = RandomNumber(6700, 6799);
			AlgorithmType = "F";
			break;
		case "35":
			BankBranch = RandomNumber(2400, 2499);
			break;
		case "38":
			BankBranch = RandomNumber(9000, 9499);
			break;
		default:
			BankIDStr = "01";
			BankBranch = RandomNumber(1, 999);
			break;

		}

		BankBranchStr = PaddingLeftWithZero(BankBranch, 4);
		return BankBranchStr;
	}

	public static int getBankAccountBasePartially() {
		int BankAccountBase1 = RandomNumber(0, 9999999);
		// int BankAccountBase2 = RandomNumber(0, 99999999999); // only for
		// Algorithm E and G
		return BankAccountBase1;
	}

	public static int[] GetAlgorithmWeight(String AlgorithmType) {

		Integer[] WeightNumberArr = [ 0, 0, 6, 3, 7, 9, 0, 0, 10, 5, 8,
				4, 2, 1, 0, 0, 0, 0 ];
		switch (AlgorithmType) {
		case "A":
			Integer[]  WeightNumberArrA = [ 0, 0, 6, 3, 7, 9, 0, 0, 10, 5,
					8, 4, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrA;
			break;
		case "B":
			Integer[]  WeightNumberArrB = [ 0, 0, 0, 0, 0, 0, 0, 0, 10, 5,
					8, 4, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrB;
			break;
		case "C":
			Integer[]  WeightNumberArrC = [ 3, 7, 0, 0, 0, 0, 9, 1, 10, 5,
					3, 4, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrC;
			break;
		case "D":
			Integer[]  WeightNumberArrD = [ 0, 0, 0, 0, 0, 0, 0, 7, 6, 5,
					4, 3, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrD;
			break;
		case "E":
			Integer[]  WeightNumberArrE = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					5, 4, 3, 2, 0, 0, 0, 1 ];
			WeightNumberArr = WeightNumberArrE;
			break;
		case "F":
			Integer[]  WeightNumberArrF = [ 0, 0, 0, 0, 0, 0, 0, 1, 7, 3,
					1, 7, 3, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrF;
			break;
		case "G":
			Integer[]  WeightNumberArrG = [ 0, 0, 0, 0, 0, 0, 0, 1, 3, 7,
					1, 3, 7, 1, 0, 3, 7, 1 ];
			WeightNumberArr = WeightNumberArrG;
			break;
		case "X":
			Integer[]  WeightNumberArrX = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					0, 0, 0, 0, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrX;
			break;
		default:
			break;

		}
		return WeightNumberArr;
	}

	public static String GetCheckDigit_Mod11(String AlgorithmType,
			String number, int[] WeightNumberArr) {

		// Only AlgorithmType A, B, C, D, E are accepted here
		int sum = 0;
		int digitSum = 0;
		int digitValue = 0;
		int weightValue = 0;
		int accountLength;

		AlgorithmMod = "Mod11";

		if (AlgorithmType.equals("E")) {
			accountLength = 17;
		} else {
			accountLength = 13;
		}

		for (int i = 0; i &lt; accountLength; i++) {
			digitValue = (int) Character.getNumericValue(number.charAt(i));
			weightValue = WeightNumberArr[i];
			digitSum = digitValue * weightValue;
			sum += digitSum;
			System.out.println("No: " + i + " digitValue: " + digitValue
					+ " * weightValue: " + weightValue + " = digitSum: "
					+ digitSum + " sum:" + sum);
		}
		int modNo = 11;
		int mod = (sum % modNo);
		if (mod == 0) {
			return "0";
		} else if (mod == 1) {
			return "N/A";
		} else {

			return Integer.toString(modNo - mod);
		}
	}

	public static String GetCheckDigit_Mod10(String AlgorithmType,
			String number, int[] WeightNumberArr) {
		// Only AlgorithmType F, G are accepted here
		int sum = 0;
		int digitSum = 0;
		int digitValue = 0;
		int weightValue = 0;
		int accountLength;

		AlgorithmMod = "Mod10";

		if (AlgorithmType.equals("G")) {
			accountLength = 17;
		} else {
			accountLength = 13;
		}

		for (int i = 0; i &lt; accountLength; i++) {
			digitValue = (int) Character.getNumericValue(number.charAt(i));
			weightValue = WeightNumberArr[i];
			digitSum = digitValue * weightValue;
			sum += digitSum;
			System.out.println("No: " + i + " digitValue: " + digitValue
					+ " * weightValue: " + weightValue + " = digitSum: "
					+ digitSum + " sum:" + sum);
		}
		int modNo = 10;
		int mod = (sum % modNo);
		if (mod == 0) {
			return "0";
		} else {

			return Integer.toString(modNo - mod);
		}
	}

/*
	public static void printInfo() {
		System.out.println("BankIDStr: " + BankIDStr);
		System.out.println("BankBranchStr: " + BankBranchStr);
		System.out.println("BankAccountBaseStr: " + BankAccountBaseStr);
		System.out.println("suffixStr: " + suffixStr);
		System.out.println("AlgorithmType: " + AlgorithmType);
		// System.out.println("algorithmWeight: " + String.Join(",",
		// algorithmWeight));
		System.out.println("AlgorithmMod: " + AlgorithmMod);
		System.out.println("checkDigit: " + checkDigit);
		System.out.println("BankAccountStr: " + BankIDStr + "-" + BankBranchStr
				+ "-" + BankAccountBaseStr + "-" + suffixStr);
		System.out.println("BankAccountStr: " + BankAccountStr);
		System.out.println("BankAccountStr length: " + BankAccountStr.length());
		System.out.println("");

	}
*/
	public static void checkAccountBaseLengthSetting() {
		if (accountBaseLengthSetting.equals("7")) {
			BankAccountBaseStr = BankAccountBaseStr.substring(1);
		}
	}

	public static void checkSuffixSetting() {
		// Not applied to Algorithm E and G
		if (suffixSetting.equals("R4")) {
		} else if (suffixSetting.equals("R3")) {
			suffixStr = suffixStr.substring(1);
		} else if (suffixSetting.equals("0000")) {
			suffixStr = "0000";
		} else if (suffixSetting.equals("000")) {
			suffixStr = "000";
		}
	}
	/**/
    //getBankAccount
    public static String getBankAccount()
    {
        //1. get BankID
        BankIDStr = getBankID();
        //2. get BankBranch
        //Based on BankID, filter the AlgorithmType of D, E, E, G, X, F
        BankBranchStr = getBankBranch(BankIDStr);
        doMod();
        return BankAccountStr;
    }

    public static String getBankAccountA()
    {
        //1. get BankID
        BankIDStr = getBankID_AB();
        //2. get BankBranch
        //Based on BankID, filter the AlgorithmType of D, E, E, G, X, F
        BankBranchStr = getBankBranch(BankIDStr);
        
        suffixStr = PaddingLeftWithZero(RandomNumber(0, 9999), 4);
        AlgorithmType = "A";
        checkDigit = "N/A";
        while (checkDigit.equals("N/A")){        
            BankAccountBaseStr = PaddingLeftWithZero(RandomNumber(0, 98999), 7);
            String tempBankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr;
            algorithmWeight = GetAlgorithmWeight(AlgorithmType);
            checkDigit = GetCheckDigit_Mod11(AlgorithmType, tempBankAccountStr, algorithmWeight);                
            if(checkDigit.equals("N/A") == false) break
        } 
        BankAccountBaseStr = BankAccountBaseStr + checkDigit;
        checkSuffixSetting();
        checkAccountBaseLengthSetting();
        BankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr + suffixStr;
        //printInfo();
        return BankAccountStr;
    }

    public static String getBankAccountB()
    {
        //1. get BankID
        BankIDStr = getBankID_AB();
        //2. get BankBranch
        //Based on BankID, filter the AlgorithmType of D, E, E, G, X, F
        BankBranchStr = getBankBranch(BankIDStr);

        suffixStr = PaddingLeftWithZero(RandomNumber(0, 9999), 4);
        AlgorithmType = "B";
        checkDigit = "N/A";
        while (checkDigit.equals("N/A"))
        {
            BankAccountBaseStr = PaddingLeftWithZero(RandomNumber(99000, 999999), 7);
            String tempBankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr;
            algorithmWeight = GetAlgorithmWeight(AlgorithmType);
            checkDigit = GetCheckDigit_Mod11(AlgorithmType, tempBankAccountStr, algorithmWeight);
            if(checkDigit.equals("N/A") == false) break
        } 
        BankAccountBaseStr = BankAccountBaseStr + checkDigit;
        checkSuffixSetting();
        checkAccountBaseLengthSetting();
        BankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr + suffixStr;
        //printInfo();
        return BankAccountStr;
    }

    public static String getBankAccountByType(String type)
    {
        switch (type)
        {
            case "A":
                BankAccountStr = getBankAccountA();
                break;
            case "B":
                BankAccountStr = getBankAccountB();
                break;
            default:
                BankIDStr = getBankID(type);
                BankBranchStr = getBankBranch(BankIDStr);
                doMod();
                break;
        }
           //printInfo();
        return BankAccountStr;
    }
	/**/
	public static void main(String[] args) {
		String accountStr1 = getBankAccountByType("C");
		String accountStrA = getBankAccountA();
		String accountStrB = getBankAccountB();
		//String accountStr = getBankAccount();
	}
	

}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script -Call Bank Account Geberator Class" id="4808b5ce-6c5e-42be-833f-b12dd9ddeeb5"><con:settings/><con:config><script>context.setProperty("BankAccountBase", new BankAccountBase());
public class BankAccountBase {
	public static String BankIDStr;
	public static String BankBranchStr;
	public static String AlgorithmType;
	public static String AlgorithmMod;
	public static String checkDigit;
	public static String BankAccountBaseStr;
	public static String suffixStr;
	public static String BankAccountStr;
	public static int[] algorithmWeight;

	public static String accountBaseLengthSetting = "7";
	public static String suffixSetting = "000";

	public static int RandomNumber(int min, int max) {
		int res = (int) (min + (Math.random() * (max - min)));
		return res;
	}

	public static String PaddingLeftWithZero(int num, int length) {
		def valueStr=num.toString();
    		def res=valueStr.padLeft(length, '0');
    		return res;
		
	}

	public static String PaddingLeftWithZero(String num, int length) {
		
		def res=num.padLeft(length, '0');
    		return res;
	}

	public static String doMod() {
		checkDigit = "N/A"
		while (checkDigit.equals("N/A"))
		{
			getBankAccountBaseStr();

			String tempBankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr;
			// validate the length of BankAccountStr is 2+4+7 = 13
			// get AlgorithmWeight
			algorithmWeight = GetAlgorithmWeight(AlgorithmType);
			if (AlgorithmType.equals("A") || AlgorithmType.equals("B")
					|| AlgorithmType.equals("C") || AlgorithmType.equals("D")) {

				checkDigit = GetCheckDigit_Mod11(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("E")) {
				tempBankAccountStr = tempBankAccountStr + suffixStr;
				checkDigit = GetCheckDigit_Mod11(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("F")) {
				checkDigit = GetCheckDigit_Mod10(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("G")) {
				tempBankAccountStr = tempBankAccountStr + suffixStr;
				checkDigit = GetCheckDigit_Mod10(AlgorithmType,
						tempBankAccountStr, algorithmWeight);
			} else if (AlgorithmType.equals("X")) {
				AlgorithmMod = "Mod 1";
				checkDigit = Integer.toString(RandomNumber(0, 9));
			}

			if(checkDigit.equals("N/A") == false) break
		}

		if (AlgorithmType.equals("E") || AlgorithmType.equals("G")) {

			suffixStr = suffixStr + checkDigit;
			//get the last digit of suffixStr
			suffixStr = suffixStr.substring(suffixStr.length()-3,suffixStr.length())
		} else {
			BankAccountBaseStr = BankAccountBaseStr + checkDigit;
			checkSuffixSetting();
		}

		checkAccountBaseLengthSetting();
		BankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr + suffixStr;

		return BankAccountStr;
	}

	// If AlgorithmType is E or G, return the account base and first 3 digit of
	// suffix.
	// If AlgorithmType is others, return first 7 digit of the account base and
	// first 3 digit of suffix.
	public static void getBankAccountBaseStr() {
		int ranNoBankAccountBase;
		int ranNoSuffix;

		if (AlgorithmType.equals("E") || AlgorithmType.equals("G")) {
			ranNoBankAccountBase = RandomNumber(0, 9999999);
			BankAccountBaseStr = PaddingLeftWithZero(ranNoBankAccountBase, 8);

			ranNoSuffix = RandomNumber(0, 99);
			suffixStr = PaddingLeftWithZero(ranNoSuffix, 3);

		} else {
			ranNoBankAccountBase = RandomNumber(0, 999999);
			BankAccountBaseStr = PaddingLeftWithZero(ranNoBankAccountBase, 7);

			ranNoSuffix = RandomNumber(0, 9999);
			suffixStr = PaddingLeftWithZero(ranNoSuffix, 4);
		}

		setAlgorithmBasedonAccountBase(ranNoBankAccountBase);
		// After setAlgorithmBasedonAccountBase(), the AlgorithmType should be
		// set up.

	}

	public static void setAlgorithmBasedonAccountBase(int accountBase) {
		if (AlgorithmType.equals("Unkown")) {
			if (accountBase &lt; 99000) {
				AlgorithmType = "A";

			} else {
				AlgorithmType = "B";
			}
		}
	}

	public static String getBankID() {
		String[] BankIDArr = [ "01", "02", "03", "06", "08", "09", "11", "12",
				"13", "14", "15", "16", "17", "18", "19", "20", "21", "22",
				"23", "24", "25", "26", "27", "28", "29", "30", "31", "33",
				"35", "38" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID(String type) {
		switch (type) {
		case "A":
			BankIDStr = getBankID_AB();
			break;
		case "B":
			BankIDStr = getBankID_AB();
			break;
		case "D":
			BankIDStr = getBankID_D();
			break;
		case "E":
			BankIDStr = getBankID_E();
			break;
		case "F":
			BankIDStr = getBankID_F();
			break;
		case "G":
			BankIDStr = getBankID_G();
			break;
		case "X":
			BankIDStr = getBankID_X();
			break;
		default:
			BankIDStr = getBankID_AB();
			break;
		}
		return BankIDStr;
	}

	public static String getBankID_AB() {
		String[] BankIDArr = [ "01", "02", "03", "06", "11", "12", "13", "14",
				"15", "16", "17", "18", "19", "20", "21", "22", "23", "24",
				"27", "30", "35", "38" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID_D() {
		BankIDStr = "08";
		return BankIDStr;
	}

	public static String getBankID_E() {
		BankIDStr = "09";
		return BankIDStr;
	}

	public static String getBankID_F() {
		String[] BankIDArr = [ "25", "33" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID_G() {
		String[] BankIDArr = [ "26", "28", "29" ];
		Random random = new Random();
		int index = RandomNumber(0, BankIDArr.length - 1);
		BankIDStr = BankIDArr[index];
		return BankIDStr;
	}

	public static String getBankID_X() {
		BankIDStr = "31";
		return BankIDStr;
	}

	public static String getBankBranch(String BankIDStr) {
		int BankBranch;
		String BankBranchStr;
		// String BankIDStr = PaddingLeftWithZero(BankID,2);
		int i;
		AlgorithmType = "Unkown";
		switch (BankIDStr) {
		case "01":
			i = RandomNumber(1, 3);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else if (i == 2) {
				BankBranch = RandomNumber(1100, 1199);
			} else {
				BankBranch = RandomNumber(1800, 1899);
			}
			break;
		case "02":
			i = RandomNumber(1, 2);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else {
				BankBranch = RandomNumber(1200, 1299);
			}
			break;
		case "03":
			i = RandomNumber(1, 5);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else if (i == 2) {
				BankBranch = RandomNumber(1300, 1399);
			} else if (i == 3) {
				BankBranch = RandomNumber(1500, 1599);
			} else if (i == 4) {
				BankBranch = RandomNumber(1700, 1799);
			} else {
				BankBranch = RandomNumber(1900, 1999);
			}
			break;
		case "06":
			i = RandomNumber(1, 2);
			if (i == 1) {
				BankBranch = RandomNumber(1, 999);
			} else {
				BankBranch = RandomNumber(1400, 1499);
			}
			break;
		case "08":
			BankBranch = RandomNumber(6500, 6599);
			AlgorithmType = "D";
			break;
		case "09":
			BankBranch = 0;
			AlgorithmType = "E";
			break;
		case "11":
			i = RandomNumber(1, 2);
			if (i == 1) {
				BankBranch = RandomNumber(5000, 6499);
			} else {
				BankBranch = RandomNumber(6600, 8999);
			}
			break;
		case "12":
			i = RandomNumber(1, 3);
			if (i == 1) {
				BankBranch = RandomNumber(3000, 3299);
			} else if (i == 2) {
				BankBranch = RandomNumber(3400, 3499);
			} else {
				BankBranch = RandomNumber(3600, 3699);
			}
			break;
		case "13":
			BankBranch = RandomNumber(4900, 4999);
			break;
		case "14":
			BankBranch = RandomNumber(4700, 4799);
			break;
		case "15":
			BankBranch = RandomNumber(3900, 3999);
			break;
		case "16":
			BankBranch = RandomNumber(4400, 4499);
			break;
		case "17":
			BankBranch = RandomNumber(3300, 3399);
			break;
		case "18":
			BankBranch = RandomNumber(3500, 3599);
			break;
		case "19":
			BankBranch = RandomNumber(4600, 4649);
			break;
		case "20":
			BankBranch = RandomNumber(4100, 4199);
			break;
		case "21":
			BankBranch = RandomNumber(4800, 4899);
			break;
		case "22":
			BankBranch = RandomNumber(4000, 4049);
			break;
		case "23":
			BankBranch = RandomNumber(3700, 3799);
			break;
		case "24":
			BankBranch = RandomNumber(4300, 4399);
			break;
		case "25":
			BankBranch = RandomNumber(2500, 2599);
			AlgorithmType = "F";
			break;
		case "26":
			BankBranch = RandomNumber(2600, 2699);
			AlgorithmType = "G";
			break;
		case "27":
			BankBranch = RandomNumber(3800, 3849);
			break;
		case "28":
			BankBranch = RandomNumber(2100, 2149);
			AlgorithmType = "G";
			break;
		case "29":
			BankBranch = RandomNumber(2150, 2299);
			AlgorithmType = "G";
			break;
		case "30":
			BankBranch = RandomNumber(2900, 2949);
			break;
		case "31":
			BankBranch = RandomNumber(2800, 2849);
			AlgorithmType = "X";
			break;
		case "33":
			BankBranch = RandomNumber(6700, 6799);
			AlgorithmType = "F";
			break;
		case "35":
			BankBranch = RandomNumber(2400, 2499);
			break;
		case "38":
			BankBranch = RandomNumber(9000, 9499);
			break;
		default:
			BankIDStr = "01";
			BankBranch = RandomNumber(1, 999);
			break;

		}

		BankBranchStr = PaddingLeftWithZero(BankBranch, 4);
		return BankBranchStr;
	}

	public static int getBankAccountBasePartially() {
		int BankAccountBase1 = RandomNumber(0, 9999999);
		// int BankAccountBase2 = RandomNumber(0, 99999999999); // only for
		// Algorithm E and G
		return BankAccountBase1;
	}

	public static int[] GetAlgorithmWeight(String AlgorithmType) {

		Integer[] WeightNumberArr = [ 0, 0, 6, 3, 7, 9, 0, 0, 10, 5, 8,
				4, 2, 1, 0, 0, 0, 0 ];
		switch (AlgorithmType) {
		case "A":
			Integer[]  WeightNumberArrA = [ 0, 0, 6, 3, 7, 9, 0, 0, 10, 5,
					8, 4, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrA;
			break;
		case "B":
			Integer[]  WeightNumberArrB = [ 0, 0, 0, 0, 0, 0, 0, 0, 10, 5,
					8, 4, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrB;
			break;
		case "C":
			Integer[]  WeightNumberArrC = [ 3, 7, 0, 0, 0, 0, 9, 1, 10, 5,
					3, 4, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrC;
			break;
		case "D":
			Integer[]  WeightNumberArrD = [ 0, 0, 0, 0, 0, 0, 0, 7, 6, 5,
					4, 3, 2, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrD;
			break;
		case "E":
			Integer[]  WeightNumberArrE = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					5, 4, 3, 2, 0, 0, 0, 1 ];
			WeightNumberArr = WeightNumberArrE;
			break;
		case "F":
			Integer[]  WeightNumberArrF = [ 0, 0, 0, 0, 0, 0, 0, 1, 7, 3,
					1, 7, 3, 1, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrF;
			break;
		case "G":
			Integer[]  WeightNumberArrG = [ 0, 0, 0, 0, 0, 0, 0, 1, 3, 7,
					1, 3, 7, 1, 0, 3, 7, 1 ];
			WeightNumberArr = WeightNumberArrG;
			break;
		case "X":
			Integer[]  WeightNumberArrX = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					0, 0, 0, 0, 0, 0, 0, 0 ];
			WeightNumberArr = WeightNumberArrX;
			break;
		default:
			break;

		}
		return WeightNumberArr;
	}

	public static String GetCheckDigit_Mod11(String AlgorithmType,
			String number, int[] WeightNumberArr) {

		// Only AlgorithmType A, B, C, D, E are accepted here
		int sum = 0;
		int digitSum = 0;
		int digitValue = 0;
		int weightValue = 0;
		int accountLength;

		AlgorithmMod = "Mod11";

		if (AlgorithmType.equals("E")) {
			accountLength = 17;
		} else {
			accountLength = 13;
		}

		for (int i = 0; i &lt; accountLength; i++) {
			digitValue = (int) Character.getNumericValue(number.charAt(i));
			weightValue = WeightNumberArr[i];
			digitSum = digitValue * weightValue;
			sum += digitSum;
			System.out.println("No: " + i + " digitValue: " + digitValue
					+ " * weightValue: " + weightValue + " = digitSum: "
					+ digitSum + " sum:" + sum);
		}
		int modNo = 11;
		int mod = (sum % modNo);
		if (mod == 0) {
			return "0";
		} else if (mod == 1) {
			return "N/A";
		} else {

			return Integer.toString(modNo - mod);
		}
	}

	public static String GetCheckDigit_Mod10(String AlgorithmType,
			String number, int[] WeightNumberArr) {
		// Only AlgorithmType F, G are accepted here
		int sum = 0;
		int digitSum = 0;
		int digitValue = 0;
		int weightValue = 0;
		int accountLength;

		AlgorithmMod = "Mod10";

		if (AlgorithmType.equals("G")) {
			accountLength = 17;
		} else {
			accountLength = 13;
		}

		for (int i = 0; i &lt; accountLength; i++) {
			digitValue = (int) Character.getNumericValue(number.charAt(i));
			weightValue = WeightNumberArr[i];
			digitSum = digitValue * weightValue;
			sum += digitSum;
			System.out.println("No: " + i + " digitValue: " + digitValue
					+ " * weightValue: " + weightValue + " = digitSum: "
					+ digitSum + " sum:" + sum);
		}
		int modNo = 10;
		int mod = (sum % modNo);
		if (mod == 0) {
			return "0";
		} else {

			return Integer.toString(modNo - mod);
		}
	}

/*
	public static void printInfo() {
		System.out.println("BankIDStr: " + BankIDStr);
		System.out.println("BankBranchStr: " + BankBranchStr);
		System.out.println("BankAccountBaseStr: " + BankAccountBaseStr);
		System.out.println("suffixStr: " + suffixStr);
		System.out.println("AlgorithmType: " + AlgorithmType);
		// System.out.println("algorithmWeight: " + String.Join(",",
		// algorithmWeight));
		System.out.println("AlgorithmMod: " + AlgorithmMod);
		System.out.println("checkDigit: " + checkDigit);
		System.out.println("BankAccountStr: " + BankIDStr + "-" + BankBranchStr
				+ "-" + BankAccountBaseStr + "-" + suffixStr);
		System.out.println("BankAccountStr: " + BankAccountStr);
		System.out.println("BankAccountStr length: " + BankAccountStr.length());
		System.out.println("");

	}
*/
	public static void checkAccountBaseLengthSetting() {
		if (accountBaseLengthSetting.equals("7")) {
			BankAccountBaseStr = BankAccountBaseStr.substring(1);
		}
	}

	public static void checkSuffixSetting() {
		// Not applied to Algorithm E and G
		if (suffixSetting.equals("R4")) {
		} else if (suffixSetting.equals("R3")) {
			suffixStr = suffixStr.substring(1);
		} else if (suffixSetting.equals("0000")) {
			suffixStr = "0000";
		} else if (suffixSetting.equals("000")) {
			suffixStr = "000";
		}
	}
	/**/
    //getBankAccount
    public static String getBankAccount()
    {
        //1. get BankID
        BankIDStr = getBankID();
        //2. get BankBranch
        //Based on BankID, filter the AlgorithmType of D, E, E, G, X, F
        BankBranchStr = getBankBranch(BankIDStr);
        doMod();
        return BankAccountStr;
    }

    public static String getBankAccountA()
    {
        //1. get BankID
        BankIDStr = getBankID_AB();
        //2. get BankBranch
        //Based on BankID, filter the AlgorithmType of D, E, E, G, X, F
        BankBranchStr = getBankBranch(BankIDStr);
        
        suffixStr = PaddingLeftWithZero(RandomNumber(0, 9999), 4);
        AlgorithmType = "A";
        checkDigit = "N/A";
        while (checkDigit.equals("N/A")){        
            BankAccountBaseStr = PaddingLeftWithZero(RandomNumber(0, 98999), 7);
            String tempBankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr;
            algorithmWeight = GetAlgorithmWeight(AlgorithmType);
            checkDigit = GetCheckDigit_Mod11(AlgorithmType, tempBankAccountStr, algorithmWeight);                
            if(checkDigit.equals("N/A") == false) break
        } 
        BankAccountBaseStr = BankAccountBaseStr + checkDigit;
        checkSuffixSetting();
        checkAccountBaseLengthSetting();
        BankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr + suffixStr;
        //printInfo();
        return BankAccountStr;
    }

    public static String getBankAccountB()
    {
        //1. get BankID
        BankIDStr = getBankID_AB();
        //2. get BankBranch
        //Based on BankID, filter the AlgorithmType of D, E, E, G, X, F
        BankBranchStr = getBankBranch(BankIDStr);

        suffixStr = PaddingLeftWithZero(RandomNumber(0, 9999), 4);
        AlgorithmType = "B";
        checkDigit = "N/A";
        while (checkDigit.equals("N/A"))
        {
            BankAccountBaseStr = PaddingLeftWithZero(RandomNumber(99000, 999999), 7);
            String tempBankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr;
            algorithmWeight = GetAlgorithmWeight(AlgorithmType);
            checkDigit = GetCheckDigit_Mod11(AlgorithmType, tempBankAccountStr, algorithmWeight);
            if(checkDigit.equals("N/A") == false) break
        } 
        BankAccountBaseStr = BankAccountBaseStr + checkDigit;
        checkSuffixSetting();
        checkAccountBaseLengthSetting();
        BankAccountStr = BankIDStr + BankBranchStr + BankAccountBaseStr + suffixStr;
        //printInfo();
        return BankAccountStr;
    }

    public static String getBankAccountByType(String type)
    {
        switch (type)
        {
            case "A":
                BankAccountStr = getBankAccountA();
                break;
            case "B":
                BankAccountStr = getBankAccountB();
                break;
            default:
                BankIDStr = getBankID(type);
                BankBranchStr = getBankBranch(BankIDStr);
                doMod();
                break;
        }
           //printInfo();
        return BankAccountStr;
    }
	/*
	public static void main(String[] args) {
		String accountStr1 = getBankAccountByType("C");
		String accountStrA = getBankAccountA();
		String accountStrB = getBankAccountB();
		//String accountStr = getBankAccount();
	}
	*/

}

def bankAccount=context.BankAccountBase.getBankAccount();
log.info bankAccount;
testRunner.testCase.setPropertyValue( 'acctNumber',bankAccount);</script></con:config></con:testStep><con:properties><con:property><con:name>acctNumber</con:name><con:value>1447015180371000</con:value></con:property></con:properties></con:testCase><con:testCase id="603c43bd-6551-4727-b35f-2447b90b7c74" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DB Demo" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DB Query Demo of Mysql" id="a9286c05-0784-47e8-9c2c-57c30e574f13"><con:settings/><con:config><script>import groovy.sql.Sql;

//define the default value of db connection as following
def dbUrl = "jdbc:mysql://percona.service.cat1.nzlc.co.nz:3306/p2p"
def dbUName = "***"
def dbPwd = "***"
def dbDriver ="com.mysql.jdbc.Driver"

/*
dbUrl = testRunner.testCase.testSuite.getPropertyValue( 'dbUrl');
dbUName = testRunner.testCase.testSuite.getPropertyValue( 'dbUName');
dbPwd = testRunner.testCase.testSuite.getPropertyValue( 'dbPwd');
dbDriver = testRunner.testCase.testSuite.getPropertyValue( 'dbDriver');
*/

// register MySQL JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

def id = testRunner.testCase.testSuite.getPropertyValue( "activeNotificationId")
def userInfo = con.rows("SELECT opted_game.id,opted_game.user_id,opted_game.mobile_number,dip_type,opted_game.favourite_name FROM opted_game WHERE status = 1 AND dip_type IS NULL")



def notificationId = userInfo[0][0]
def userId = userInfo[0][1]
def mobileNumber = userInfo[0][2]
def gameType = userInfo[0][3]
def dipType = userInfo[0][6]
def favName = userInfo[0][7]
def status = userInfo[0][8]
def codeID = userInfo[0][9]
def jackThreshold = userInfo[0][10]
def wagerAmount = userInfo[0][11]

/*
log.info userInfo[0][0]
log.info userInfo[0][1]
log.info userInfo[0][2]
*/

//Set the notification info to property file
testRunner.testCase.setPropertyValue( "notificationId",notificationId.toString())
testRunner.testCase.setPropertyValue( "userId",userId.toString())
testRunner.testCase.setPropertyValue( "mobileNumber",mobileNumber.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="DB Query Demo of DB2" id="b25b7ffd-5062-4feb-9765-01b43a2b848a"><con:settings/><con:config><script>import groovy.sql.Sql;
 
// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl = "jdbc:db2://192.168.101.74:50000/ESI_DB"
def dbUName = "gtkinst1"
def dbPwd = "gtkinst1"
def dbDriver = "com.ibm.db2.jcc.DB2Driver"


// register db2 JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

def email = testRunner.testCase.getPropertyValue('emailAddr');

//mail ="LolaYan@test.com"
//mail ="LolaYan@lottonz.co.nz"
//email ="test1537831great@test.com"
//email = "ningjinlu@gmail.com";
def sqlTicketNoStr = '''
	SELECT 
	NZDEV.ES_LINE_ITEMS.ITEM_FULFILL_ST_ID,
	NZDEV.ES_LINE_ITEMS.ORDER_ID,
	NZDEV.ESI_TICKET_DETAILS.DRAW_DATE
	FROM NZDEV.ES_LINE_ITEMS
	FULL OUTER JOIN NZDEV.ESI_TICKET_DETAILS
	ON NZDEV.ES_LINE_ITEMS.ORDER_ID = NZDEV.ESI_TICKET_DETAILS.ORDER_ID
	WHERE NZDEV.ES_LINE_ITEMS.ITEM_FULFILL_ST_ID = 'PURCH'
	fetch first 2 rows only''';
//def activationId = con.rows("Select NZDEV.ES_SECURITY.ACTIVATION_ID From NZDEV.ES_SECURITY where NZDEV.ES_SECURITY.USER_NAME = '"+email.toString()+"'");
def activationId = con.rows(sqlTicketNoStr);
log.info activationId[0][0]
def activationIdStr=activationId[0][0].toString();
//log.info activationIdStr
testRunner.testCase.setPropertyValue( 'activationId', activationIdStr );
</script></con:config></con:testStep><con:testStep type="groovy" name="DB Query of jtds" id="f63ebd5b-1690-4e76-953b-8c8471f28585"><con:settings/><con:config><script>import groovy.sql.Sql;
/** require jtds-1.2.5.jar in $PATH\SmartBear\SoapUI-5.2.1\bin\ext **/

//define the default value of db connection as following
def dbUrl = "jdbc:jtds:sqlserver://192.168.101.78:1433/MULE_SUBSCRIPTIONS"
def dbUName = "nzhang"
def dbPwd = "Topapp1!"
def dbDriver ="net.sourceforge.jtds.jdbc.Driver"

/*
dbUrl = testRunner.testCase.testSuite.getPropertyValue( 'dbUrl');
dbUName = testRunner.testCase.testSuite.getPropertyValue( 'dbUName');
dbPwd = testRunner.testCase.testSuite.getPropertyValue( 'dbPwd');
dbDriver = testRunner.testCase.testSuite.getPropertyValue( 'dbDriver');
*/

// register MySQL JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

def id = testRunner.testCase.testSuite.getPropertyValue( "activeNotificationId")
def userInfo = con.rows("SELECT * FROM subscription WHERE id = 114484")

</script></con:config></con:testStep><con:testStep type="groovy" name="DB Update Demo" id="123d6e48-7ec7-4b0a-9e1c-b83d536616df"><con:settings/><con:config><script>import groovy.sql.Sql;
 
// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl = "jdbc:db2://192.168.101.100:50000/ESI_DB"
def dbUName = "***"
def dbPwd = "***"
def dbDriver = "com.ibm.db2.jcc.DB2Driver"

/*
dbUrl = testRunner.testCase.testSuite.getPropertyValue( 'dbUrl');
dbUName = testRunner.testCase.testSuite.getPropertyValue( 'dbUName');
dbPwd = testRunner.testCase.testSuite.getPropertyValue( 'dbPwd');
dbDriver = testRunner.testCase.testSuite.getPropertyValue( 'dbDriver');
*/
// register db2 JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

def email = testRunner.testCase.getPropertyValue('userName');
//email = "LolaYan@lottonz.co.nz"
email = "LolaYan@password.com"
log.info email

//Execute the updates
con.executeUpdate("update nzdev.es_security set password='C8F3A2669B8C51DD3795164B451DAFB66B8A1098', encrypted_password='pCyg1s0nxYWm00BhOekOPQ==', salt='68D570D3' ,login_status =0 , invalid_logons=0 where USER_name='"+email.toString()+"'");


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of GetActivationId" id="c6e703c6-e5fa-41bd-af1e-d44156e710a8"><con:settings/><con:config><script>import groovy.sql.Sql;
 
// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl = "jdbc:db2://192.168.101.74:50000/ESI_DB"
def dbUName = "gtkinst1"
def dbPwd = "gtkinst1"

// register db2 JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.ibm.db2.jcc.DB2Driver" );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, "com.ibm.db2.jcc.DB2Driver");

def email = testRunner.testCase.getPropertyValue('emailAddr');

//mail ="LolaYan@test.com"
//mail ="LolaYan@lottonz.co.nz"
//email ="das33d@dasasd.com"
//email = "ningjinlu@gmail.com";

/*
def activationId = con.rows("Select NZDEV.ES_SECURITY.ACTIVATION_ID From NZDEV.ES_SECURITY where NZDEV.ES_SECURITY.USER_NAME = '"+email.toString()+"'");

log.info activationId[0][0]
def activationIdStr=activationId[0][0].toString();
//log.info activationIdStr
testRunner.testCase.setPropertyValue( 'activationId', activationIdStr );

*/

def sqlStr = "Select * From NZDEV.ES_SECURITY where NZDEV.ES_SECURITY.USER_NAME = 'das33d@dasasd.com'"
 sqlStr = "Select * From NZDEV.ES_SECURITY where NZDEV.ES_SECURITY.USER_NAME = 'ningjinlu@gmail.com'"
def res = con.rows(sqlStr)
</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC sql Request" id="f2f02574-b138-4694-a663-410b2eceb16c"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://192.168.101.78:1433/MULE_SUBSCRIPTIONS</con:connectionString><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Copy of Get an active Notification user from db" id="a7d80dd7-b261-43f9-b315-ee2334a6755d"><con:settings/><con:config><script>
import groovy.sql.Sql;
 
// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl_ESI = "jdbc:db2://192.168.101.74:50000/ESI_DB"
def dbUName_ESI = "gtkinst1"
def dbPwd_ESI = "gtkinst1"
def dbDriver_ESI ="com.ibm.db2.jcc.DB2Driver"
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(dbDriver_ESI);
def  con_ESI = Sql.newInstance(dbUrl_ESI, dbUName_ESI, dbPwd_ESI, dbDriver_ESI);

email = "ningjinlu@gmail.com"
def activationId = con_ESI.rows("Select NZDEV.ESI_PROFILE.FIRST_NAME From NZDEV.ESI_PROFILE where NZDEV.ESI_PROFILE.email_addr = '"+email.toString()+"'");

def activationId = con.rows("Select NZDEV.ES_SECURITY.USER_NAME From NZDEV.ES_SECURITY where NZDEV.ES_SECURITY.USER_ID = '"+email.toString()+"'");
log.info activationId[0][0]
</script></con:config></con:testStep><con:testStep type="groovy" name="Write into CSVReport" id="f4a2e9ee-1d84-434a-abba-9d8bce5fb0f4"><con:settings/><con:config><script>try {
	def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");
	def currentStep = context.getCurrentStep();
	def currentTestCase = currentStep.testCase;
	def currentTestSuite = currentTestCase.testSuite;
	def currentProject = currentTestSuite.project;

	//Project Info
	//get project name
	def ProjectName =  currentProject.name	
	//get Interface Count
	def ProjectInterfaceCount =  currentProject.getInterfaceCount()	
	//get TestSuite Count
	def ProjectTestSuiteCount =  currentProject.getTestSuiteCount()	
	//get MockService Count
	def ProjectMockServiceCount =  currentProject.getMockServiceCount()	
	//get RestMockService Count
	def ProjectRestMockServiceCount =  currentProject.getRestMockServiceCount()	
	// get status of project
	def ProjectStatus =  currentProject.isOpen()	
	// get path of project
	def ProjectPath =  currentProject.getPath()	
	//get ResourceRoot of project
	def ProjectResourceRoot =  currentProject.getResourceRoot()

    def finalResult = "";
    	//Check a project level property to see if the reports should be produced.
    	if(context.expand('${#Project#ProduceReports}') == 'true') 
    	{
        	//The path and file to persist results
		def resultDir = new File("C:\\Users\\user\\Temp\\SoapUIResults");
		if(!resultDir.exists()) 
		{
          	resultDir.mkdirs();
        	}
        	//def resultsFile = new File(resultDir, "CSVReport.csv");
        	def resultsFile = new File(resultDir, "testResultsReport.csv");
		//def resultsFile = new File(resultDir, "testResultsReport"+currentDate+".csv");
        	
        	//If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) 
        {
        		resultsFile.createNewFile();
            	//Project Info
            	resultsFile.write('"Project Name:","' + ProjectName + '",\n');
        		resultsFile.append('"Project Interface Count:","' + ProjectInterfaceCount + '",\n');
        		resultsFile.append('"Project Test Suite Count:","' + ProjectTestSuiteCount + '",\n');
        		resultsFile.append('"Test Running Time:","' + currentDate + '",\n');
        		resultsFile.append('\n');    //Newline
            	//Header values
            	resultsFile.append('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"Test Case Name: ' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"Test Case Result: ' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
        		def stepName = result.testStep.label
        		def stepResult = result.getStatus()
        		resultsFile.append('\n');    //Newline
        		resultsFile.append('"Test Step Name: ' + stepName + '",\n'); 
        		resultsFile.append('"Test Step Result: ' + stepResult + '",\n');

        		if ( result.getStatus().toString() == 'FAILED' ){
        			finalResult = "FAIL";
        		}else{
        			finalResult = "PASS";
        		}
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                
                resultsFile.append('Msg'+ msgCount +": "+ message + ';\n');
                msgCount++;
               
            }
        }

        resultsFile.append('",\n');    //End of messages.
        resultsFile.append(currentDate + ': Test Case END!\n');
        resultsFile.append('"Test Result: ' + finalResult + '",\n');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</script></con:config></con:testStep><con:testStep type="groovy" name="ESI" id="a61347cf-c5c9-4000-9c67-824d65e161c3"><con:settings/><con:config><script>import groovy.sql.Sql;

//Create excel file
def resultDir = new File("C:\\Users\\user\\Temp\\SoapUIResults");
if(!resultDir.exists()) 
{
	resultDir.mkdirs();
}

def resultsFile = new File(resultDir, "PerfData.csv");

if(!resultsFile.exists()) 
{
	resultsFile.createNewFile();
	resultsFile.append('"Mobile_Number","First_Name","wager_amount","dip_name","favourite_name","opted_game_id"');
	resultsFile.append('\n'); 
}

//define the default value of db connection as following
def dbUrl = "jdbc:mysql://percona.service.cat1.nzlc.co.nz:3306/p2p"
dbUrl = "jdbc:mysql://192.168.101.104:3306/p2p"
def dbUName = "p2p"
def dbPwd = "D0ntN33dTh1s"
def dbDriver ="com.mysql.jdbc.Driver"
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl_ESI = "jdbc:db2://192.168.101.74:50000/ESI_DB"
def dbUName_ESI = "gtkinst1"
def dbPwd_ESI = "gtkinst1"
def dbDriver_ESI ="com.ibm.db2.jcc.DB2Driver"
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(dbDriver_ESI);
def  con_ESI = Sql.newInstance(dbUrl_ESI, dbUName_ESI, dbPwd_ESI, dbDriver_ESI);

def userInfo = con.rows("SELECT opted_game.id,opted_game.user_id,opted_game.mobile_number,dip_type,opted_game.favourite_name,opted_game.wager_amount FROM opted_game WHERE status = 1 and dip_type is not null and user_id is not null")
def Num = userInfo.size()
for (int i = 5232; i &lt; Num; i++) 
{
	def notificationId = userInfo[i][0]
	def userId = userInfo[i][1]
	def mobileNumber = userInfo[i][2]
	def dipType = userInfo[i][3]
	def favName = userInfo[i][4]
	def WagerAmount = userInfo[i][5]
	log.info "NO."+i+" notificationId: "+notificationId+" userId: "+userId+" mobileNumber: "+mobileNumber+" dipType: "+dipType+" favName: "+favName+" WagerAmount: "+WagerAmount
	def USER_NAME = con_ESI.rows("Select NZDEV.ES_SECURITY.USER_NAME From NZDEV.ES_SECURITY where NZDEV.ES_SECURITY.USER_ID = '"+userId.toString()+"'");
	USER_NAME = USER_NAME[0][0]
	log.info " USER_NAME: "+USER_NAME
	def FIRST_NAME = con_ESI.rows("Select NZDEV.ESI_PROFILE.FIRST_NAME From NZDEV.ESI_PROFILE where NZDEV.ESI_PROFILE.email_addr = '"+USER_NAME.toString()+"'");
	FIRST_NAME = FIRST_NAME[0][0]
	log.info "FIRST_NAME: " + FIRST_NAME

	def dipTypeS = dipType.toString()

	def dipTypeI = Integer.parseInt(dipTypeS)
	switch (dipTypeI) {
         case 480: dip_name = "StarterLucky";break;
         case 490: dip_name = "StarterPower";break;
         case 500: dip_name = "BasicLucky";break;
         case 510: dip_name = "BasicPower";break;
         case 520: dip_name = "BasicTriple";break;
         case 530: dip_name = "SuperLucky";break;
         case 540: dip_name = "SuperPower";break;
         case 550: dip_name = "SuperTriple";break;
         case 555: dip_name = "SuperPlusTriple";break;
         case 560: dip_name = "MegaLucky";break;
         case 570: dip_name = "MegaPower";break;
         case 580: dip_name = "Mega24Triple";break;
         case 590: dip_name = "MegaTriple";break;
         default: dip_name = "StarterLucky";break;
      }
	
	resultsFile.append(mobileNumber+","+FIRST_NAME+","+WagerAmount+","+dip_name+","+favName+","+notificationId);
	resultsFile.append('\n');
}
log.info userInfo.size()
</script></con:config></con:testStep><con:testStep type="groovy" name="Case Switch" id="17d3baf5-2d48-49aa-918e-bbc0f986d50d"><con:settings/><con:config><script>def dipTypeS = "550"

def dipType = Integer.parseInt(dipTypeS)
switch (dipType) {
         case 480: dip_name = "StarterLucky";break;
         case 490: dip_name = "StarterPower";break;
         case 500: dip_name = "BasicLucky";break;
         case 510: dip_name = "BasicPower";break;
         case 520: dip_name = "BasicTriple";break;
         case 530: dip_name = "SuperLucky";break;
         case 540: dip_name = "SuperPower";break;
         case 550: dip_name = "SuperTriple";break;
         case 555: dip_name = "SuperPlusTriple";break;
         case 560: dip_name = "MegaLucky";break;
         case 570: dip_name = "MegaPower";break;
         case 580: dip_name = "Mega24Triple";break;
         case 590: dip_name = "MegaTriple";break;
         default: dip_name = "StarterLucky";break;
      }</script></con:config></con:testStep><con:properties><con:property><con:name>activationId</con:name><con:value>PURCH</con:value></con:property></con:properties></con:testCase><con:testCase id="54a8f034-892a-4b7b-9c34-d7f3facd1dfa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Date Time Demo" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Past Date Time Demo" id="51da42a6-f0b9-4aaf-9f03-b775406fd533"><con:settings/><con:config><script>import java.text.SimpleDateFormat

def purchaseDate ="2016-03-19+13:00".toString()
log.info purchaseDate
Date date = new SimpleDateFormat("yyyy-MM-dd'+'HH:mm").parse(purchaseDate);
String formattedDate = new SimpleDateFormat("dd/MM/yyyy").format(date);
log.info formattedDate
//messageExchange.modelItem.testStep.testCase.testSuite.setPropertyValue( "enddateTrnxHist",formattedDate)


 /*
def date = new Date()

String formattedDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(date);

testRunner.testCase.testSuite.setPropertyValue( "DateEntry",formattedDate.toString())
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Current Date Time Demo" id="89c8bdc0-4f57-417f-ba3d-891999019a46"><con:settings/><con:config><script>import java.text.SimpleDateFormat

def date = new Date()
String formattedDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(date);</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="746f220c-a799-409a-8239-bec849203f37" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Json Data Demo" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read json from response body" id="a5a9e274-f991-47f9-8a74-934ad5cf4fce"><con:settings/><con:config><script>import java.text.ParseException;
import java.text.SimpleDateFormat;
import groovy.json.JsonSlurper

def response1 = messageExchange.modelItem.testStep.getPropertyValue("response")
def jsonSlurper = new JsonSlurper()
def object1 = jsonSlurper.parseText(response1)

//Get purchaseDate info from response body
def purchaseDate=object1.purchaseDate</script></con:config></con:testStep><con:testStep type="groovy" name="Assertion Json Data Demo" id="48c6bc3f-6e7d-4376-b8f5-5606cb2ec728"><con:settings/><con:config><script>import groovy.json.JsonSlurper

/** Use JsonSlurper to parse the json response body **/
def response1 = messageExchange.modelItem.testStep.getPropertyValue("response")
def jsonSlurper = new JsonSlurper()
def object1 = jsonSlurper.parseText(response1)

/* We expect a list of Lotto tickets returned */
//Get Lotto Draw Number
def drawNumberArr = object1.drawNumber

//Set the Lotto Draw Number to property file
messageExchange.modelItem.testStep.testCase.setPropertyValue( "bullseyeDrawNumber",drawNumberArr.toString())

//Get property
def expectedDrawNum = messageExchange.modelItem.testStep.testCase.getPropertyValue( "latestBullseyeDrawNumber")

assert expectedDrawNum.toString() == drawNumberArr.toString()
</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Json Msg" id="f62abf79-444e-44a1-bc9b-6b1f66fb9cf3"><con:settings/><con:config><script>import org.json.simple.JSONObject;
//This require we have json-simple-1.1.jar existing in SOAPUI/lib


// Generate one level json format msg
JSONObject obj = new JSONObject();
obj.put("Message", "Success");
obj.put("Key1", "Value1");
obj.put("Key2", "Value2");

log.info obj.toString()

// Generate json format msg with multiple level data
JSONObject objMain = new JSONObject();
objMain.put("Message", "Success");

JSONObject objSub = new JSONObject();
objSub.put("SubKey1", "SubValue1");
objSub.put("SubKey2", "SubValue2");
objSub.put("SubKey3", "SubValue3");

objMain.put("SubMessage", objSub);

log.info objMain.toString()</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="87c032b0-62e9-4aac-a8e2-d497746bd22e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="XML Data Demo" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Assertion XML Data Demo" id="89f03649-3a03-448e-a4d9-b3b9d1237e9f"><con:settings/><con:config><script>/* using Xmlparser or XmlSlurper  
 * If you want to transform an existing document to another then XmlSlurper will be the choice
 * If you want to update and read at the same time then XmlParser is the choice.
 * Here we using Xmlparser to parse the xml response body
*/
def response = messageExchange.modelItem.testStep.properties['ResponseAsXml'].value
def responseXml = new XmlParser().parseText(response)

/* We expect a list of Lotto tickets returned */
def drawNumber = responseXml.MainDraw.DrawNumber.text()
//log.info drawNumber

//Set the Lotto Draw Number to property file
messageExchange.modelItem.testStep.testCase.setPropertyValue( "bullseyeDrawNumber",drawNumber)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cab33299-7f3f-4024-8b1c-c8c2d5bd4b27" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="String Demo" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Random Number" id="34ce02a9-3c1c-45f7-8c7d-d4591ce28f2c"><con:settings/><con:config><script>def GetRandomNumber(min,max)
{
	def n=Math.abs(new Random().nextInt() % (max-min)) + min;
	return n;
}

int min = 10000;
int max = 99999;

GetRandomNumber(min,max);</script></con:config></con:testStep><con:testStep type="groovy" name="Random String" id="0acf84e3-f223-4667-a36a-954f70839885"><con:settings/><con:config><script>
def GetRandomString( int length)
{
	String allChar = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String letterChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String numberChar = "0123456789";

	StringBuffer sb = new StringBuffer();
	Random random = new Random();

	for (int i = 0; i &lt; length; i++) 
	{
		sb.append(allChar.charAt(random.nextInt(allChar.length())));
	}
	return sb;
}

log.info GetRandomString(30)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0c17f204-65f1-40a3-b877-e0b2c60b0165" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set up endpoint of current test project" id="b4e110ff-ae20-44a1-9dc5-0821bece4ffb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

/*
 @Description : Setting the endpoint URL of all the REST Test Step of current test suite
*/

// Read the endpoint from Project Endpoint ${#Project#AuthEndpoint}
def endpoint = testRunner.testCase.testSuite.project.getPropertyValue( 'myEndpoint');
def testProject = testRunner.testCase.testSuite.project

testSuiteList = testProject.getTestSuites()
testSuiteList.each{
	//Get current test suite
	testSuite = testProject.getTestSuiteByName(it.key)
	log.info "  Test Suite name:"+testSuite.name
	
	//Get all the test case list of current test suite
	testCaseList = testSuite.getTestCases()

	// Loop all the test cases in the testcase list
	testCaseList.each
	{
		testCase = testSuite.getTestCaseByName(it.key)
		log.info "  Test case name:"+testCase.name

		//Get all the test steps list of current test case
		wsdlTestSteps = testCase.getTestStepsOfType( com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep.class )  //only WsdlTestRequest steps
		wsdlTestSteps.each
		{
			RestTestStepEndponit = it.properties['Endpoint'].value
			log.info "RestTestStepEndponit: " + RestTestStepEndponit
			it.properties['Endpoint'].value = endpoint
		}
	}
}

  
log.info "All the endpoints of "+testSuite.name+" are now : "+endpoint
</script></con:config></con:testStep><con:testStep type="groovy" name="Set up endpoint of current test suite" id="64595471-197d-40c1-8ab9-4a1b14ca5560"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

/*
 @Description : Setting the endpoint URL of all the REST Test Step of current test suite
*/

// Read the endpoint from Project Endpoint ${#Project#AuthEndpoint}
def endpoint = testRunner.testCase.testSuite.project.getPropertyValue( 'myEndpoint');

//Get current test suite
def testSuite = testRunner.testCase.testSuite

//Get all the test case list of current test suite
testCaseList = testSuite.getTestCases()

// Loop all the test cases in the testcase list
testCaseList.each
{
	testCase = testSuite.getTestCaseByName(it.key)
	log.info "  Test case name:"+testCase.name

	//Get all the test steps list of current test case
	wsdlTestSteps = testCase.getTestStepsOfType( com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep.class )  //only WsdlTestRequest steps
	wsdlTestSteps.each
	{
		RestTestStepEndponit = it.properties['Endpoint'].value
		log.info "RestTestStepEndponit: " + RestTestStepEndponit
		it.properties['Endpoint'].value = endpoint
	}
}
  
log.info "All the endpoints of "+testSuite.name+" are now : "+endpoint
</script></con:config></con:testStep><con:testStep type="groovy" name="Set up header" id="88a37e7d-9569-43bf-a2e3-2223b730f76c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringsMap 
/*
 @Description : Setting the endpoint URL of all the REST Test Step of current test suite
*/

// Read the endpoint from Project Endpoint ${#Project#AuthEndpoint}
def endpoint = testRunner.testCase.testSuite.project.getPropertyValue( 'resultRelayEndpoint');

//Get current test suite
def testSuite = testRunner.testCase.testSuite

//Get all the test case list of current test suite
testCaseList = testSuite.getTestCases()

// Loop all the test cases in the testcase list
testCaseList.each
{
	testCase = testSuite.getTestCaseByName(it.key)
	log.info "  Test case name:"+testCase.name

	//Get all the test steps list of current test case
	wsdlTestSteps = testCase.getTestStepsOfType( com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep.class )  //only WsdlTestRequest steps
	wsdlTestSteps.each
	{
		RestTestStepEndponit = it.properties['Endpoint'].value
		log.info "RestTestStepEndponit: " + RestTestStepEndponit
		def headers = new StringToStringsMap()
		headers.put("Authorization","Basic YWRtaW46cXdlYXNkMTIz")
		headers.put("Content-Type","application/json")
		log.info headers
		it.testRequest.setRequestHeaders(headers)
	}
}
  
log.info "All the headers of "+testSuite.name+" are now : "+ headers
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3accc9d6-7dd3-441e-a0ca-85ecaaf64dc1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HMAC-SHA" searchProperties="true"><con:description>https://developer.xero.com/documentation/getting-started/public-applications/

URLs for authorisation and using the API

Xero follows the OAuth v1.0a spec. The URL’s to authorize your application are:

Get an Unauthorised Request Token:	https://api.xero.com/oauth/RequestToken
Redirect a user:	https://api.xero.com/oauth/Authorize
Swap a Request Token for an Access Token:	https://api.xero.com/oauth/AccessToken
Connect to the Xero API:	https://api.xero.com/api.xro/2.0/…
Callback URL

When getting a request token and specifying the callback URL, the callback URL should be no more than 250 characters long.
The callback url must be within the domain specified when registering your app. Learn more
If a callback url is not specified then the user will be given an authorisation code to enter into your application.
Signing Requests

All requests need to be signed using HMAC-SHA1.

https://developer.xero.com/documentation/getting-started/oauth-issues/

ignature Invalid (signature_invalid)

This can be quite generic reason for a number of signature generation errors. The best tip here is using an up to date version of one of our recommended code samples as they take care of signature generation.

Failed to validate signature

oauth_problem=signature_invalid&amp;oauth_problem_advice=Failed to validate signature
Some possible causes:

The public-private application certificate keypair used to sign requests does not match the public key uploaded to your application in the Xero Developer Centre
The application consumer key does not match the application certificate keypair
Not all expected elements are being used to generate the signature.
Resolution: No easy way to advise on the specific issues here. Again we recommend using a code sample if possible, but if you are still stuck having gone through the possible causes above, ask a question in our developer community. A GET request requires less parts of the request to be signed – check if you can make a GET request before moving on to PUT/POST as this will help isolate the cause.

</con:description><con:settings/><con:testStep type="groovy" name="Groovy Script" id="7db64207-d8a4-4236-8a24-dd32856510fd" disabled="true"><con:settings/><con:config><script>import java.nio.charset.StandardCharsets;
import java.security.SignatureException
import java.security.spec.EncodedKeySpec;
import com.eviware.soapui.support.types.StringToStringMap 
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.sql.Date.*;

def now = new Date();
def timestamp = ""+(Math.round(now.getTime()/1000)-1801);

//Parameters used to generate the signature

def GetRandomString( int length)
{
	String allChar = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String letterChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String numberChar = "0123456789";

	StringBuffer sb = new StringBuffer();
	Random random = new Random();

	for (int i = 0; i &lt; length; i++) 
	{
		sb.append(allChar.charAt(random.nextInt(allChar.length())));
	}
	return sb;
}

String oauth_nonce=GetRandomString(10);
String user_agent = "AppDemo1";
String consumerKey ="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU"; //EORT56K6NSY9QEW8VMXVBN6VHGH60E		NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU
String consumerSecret ="AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6";
String callback ="http://localhost:8086/receivetoken"
String secret = consumerSecret
String oauth_signature_method="HMAC-SHA1"
String oauth_version="1.0"
String signature=""

log.info "Timestamp Genereated : "+timestamp

try {
	
	// get an hmac_sha1 key from the raw key bytes
	SecretKeySpec signingKey = new SecretKeySpec(secret.getBytes(), "HmacSHA1");
			
	// get an hmac_sha1 Mac instance and initialize with the signing key
	Mac mac = Mac.getInstance("HmacSHA1");
	mac.init(signingKey);
			
	// compute the hmac on input data bytes
	String message = new StringBuilder().append (consumerKey).append (consumerSecret).append (timestamp).toString ();
			
	byte [] signatureBytes = mac.doFinal (message.getBytes(StandardCharsets.UTF_8));
	log.info signatureBytes
	signature = signatureBytes.encodeHex()
	   
}catch (Exception e) 
{
	throw new SignatureException("Failed to generate HMAC : " + e.getMessage());
}
	 
/*
"realm"
"oauth_callback"
"oauth_consumer_key"
"oauth_nonce"
"oauth_signature_method"
"oauth_timestamp"
"oauth_token"
"oauth_verifier"
"oauth_version"
*/
testRunner.testCase.setPropertyValue("oauth_signature",signature);
testRunner.testCase.setPropertyValue("oauth_timestamp",timestamp);
testRunner.testCase.setPropertyValue("oauth_callback",callback);
testRunner.testCase.setPropertyValue("oauth_consumer_key",consumerKey);
testRunner.testCase.setPropertyValue("oauth_signature_method",oauth_signature_method);
testRunner.testCase.setPropertyValue("oauth_version",oauth_version);

def headers = new StringToStringMap()
headers.put("oauth_signature",signature)
headers.put("oauth_timestamp",timestamp)
headers.put("oauth_callback",callback)
headers.put("oauth_consumer_key",consumerKey)
headers.put("oauth_signature_method",oauth_signature_method)
headers.put("oauth_version",oauth_version)
//Set the headers for that the teststep 
testRunner.testCase.getTestStepByName("RequestToken").testRequest.setRequestHeaders(headers)
</script></con:config></con:testStep><con:testStep type="groovy" name="Signature HMAC-SHA1" id="ea7665a7-12b4-4193-b86b-df6bb0a8bb75"><con:settings/><con:config><script><![CDATA[import java.nio.charset.StandardCharsets;
import java.security.SignatureException
import java.security.spec.EncodedKeySpec;
import com.eviware.soapui.support.types.StringToStringMap 
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.sql.Date.*;
import org.apache.commons.codec.binary.Base64;

def currTimestamp = Math.round(System.currentTimeMillis() / 1000);

Random random = new Random();
def nonce=Long.toHexString(Math.abs(random.nextLong()));
	
//Parameters used to generate the signature
String user_agent = "AppDemo1";
String consumerKey ="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU";
String consumerSecret ="AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6";
String callback ="http://localhost:8086/receivetoken";
String oauth_callback = callback;
String oauth_consumer_key =consumerKey;
String oauth_nonce=nonce;
String oauth_signature="";
String oauth_signature_method="HMAC-SHA1";
String oauth_timestamp=currTimestamp-1801+"";
String oauth_version="1.0";
	
//signatureBaseString  
def method = "GET";
def URL = "https://api.xero.com/oauth/RequestToken";
def ParameterListStr = "oauth_callback="+URLEncoder.encode(oauth_callback)+"&oauth_consumer_key="+consumerKey+"&oauth_nonce="+oauth_nonce+"&oauth_signature_method="+oauth_signature_method+"&oauth_timestamp="+oauth_timestamp+"&oauth_version="+oauth_version;
log.info method
log.info URL
log.info ParameterListStr
def signatureBaseString = method+"&"+URLEncoder.encode(URL)+"&"+URLEncoder.encode(ParameterListStr)
log.info signatureBaseString

def key = consumerSecret+"&";

Mac mac = Mac.getInstance("HmacSHA1");
SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(),mac.getAlgorithm());
// get an hmac_sha1 Mac instance and initialize with the signing key
mac.init(signingKey);
byte[] digest = mac.doFinal(signatureBaseString.getBytes());
log.info digest
byte[] result=Base64.encodeBase64(digest);
log.info "result: "+new String(result)
byte [] signatureBytes = mac.doFinal (signatureBaseString.getBytes(StandardCharsets.UTF_8));
log.info signatureBytes
signature = signatureBytes.encodeHex()
oauth_signature = new String(result)
log.info oauth_signature

testRunner.testCase.setPropertyValue("oauth_signature",oauth_signature);
testRunner.testCase.setPropertyValue("oauth_nonce",oauth_nonce);
testRunner.testCase.setPropertyValue("oauth_timestamp",oauth_timestamp);
testRunner.testCase.setPropertyValue("oauth_callback",oauth_callback);
testRunner.testCase.setPropertyValue("oauth_consumer_key",oauth_consumer_key);
testRunner.testCase.setPropertyValue("oauth_signature_method",oauth_signature_method);
testRunner.testCase.setPropertyValue("oauth_version",oauth_version);

def headers = new StringToStringMap()
headers.put("oauth_callback",URLEncoder.encode(oauth_callback));
headers.put("oauth_consumer_key",oauth_consumer_key);
headers.put("oauth_nonce",oauth_nonce);
headers.put("oauth_signature",oauth_signature)
headers.put("oauth_signature_method",oauth_signature_method)
headers.put("oauth_timestamp",oauth_timestamp)
headers.put("oauth_version",oauth_version)

//Set the headers for that the teststep 
testRunner.testCase.getTestStepByName("RequestToken").testRequest.setRequestHeaders(headers)


	

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RequestToken" id="52a5fa65-a462-4314-8d99-23c59dd58c02"><con:settings/><con:config service="https://api.xero.com" resourcePath="/oauth/RequestToken" methodName="RequestToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RequestToken" id="3679aa0b-49a1-4a53-847c-879238c6dcb6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="oauth_callback" value="http%3A%2F%2Flocalhost%3A8086%2Freceivetoken"/>
  <con:entry key="oauth_signature" value="1ajGCHvrEemmbY8uLNR7pcY0JBQ="/>
  <con:entry key="oauth_version" value="1.0"/>
  <con:entry key="oauth_nonce" value="4e192d7fbac8dc2e"/>
  <con:entry key="oauth_signature_method" value="HMAC-SHA1"/>
  <con:entry key="oauth_consumer_key" value="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU"/>
  <con:entry key="oauth_timestamp" value="1467945652"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>https://api.xero.com</con:endpoint><con:request/><con:originalUri>https://api.xero.com/oauth/RequestToken</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7577f54d-50c5-4c56-96b6-466bf65d016a" name="Script Assertion"><con:configuration><scriptText>def response1 = messageExchange.modelItem.testStep.getPropertyValue("response")
log.info response1
def oauth_token = response1.split("&amp;")[0]
def oauth_token_secret = response1.split("&amp;")[1]
def oauth_callback_confirmed = response1.split("&amp;")[2]
oauth_token=oauth_token.split("=")[1]
oauth_token_secret=oauth_token_secret.split("=")[1]
messageExchange.modelItem.testStep.testCase.setPropertyValue( "tmp_oauth_token",oauth_token)
messageExchange.modelItem.testStep.testCase.setPropertyValue( "tmp_oauth_token_secret",oauth_token_secret)

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>XeroOauth</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oauth_callback" value="${#TestCase#oauth_callback}"/>
  <con:entry key="oauth_signature" value="${#TestCase#oauth_signature}"/>
  <con:entry key="oauth_nonce" value="${#TestCase#oauth_nonce}"/>
  <con:entry key="oauth_version" value="${#TestCase#oauth_version}"/>
  <con:entry key="oauth_consumer_key" value="${#TestCase#oauth_consumer_key}"/>
  <con:entry key="oauth_signature_method" value="${#TestCase#oauth_signature_method}"/>
  <con:entry key="oauth_timestamp" value="${#TestCase#oauth_timestamp}"/>
</con:parameters><con:parameterOrder><con:entry>oauth_callback</con:entry><con:entry>oauth_consumer_key</con:entry><con:entry>oauth_nonce</con:entry><con:entry>oauth_signature</con:entry><con:entry>oauth_signature_method</con:entry><con:entry>oauth_timestamp</con:entry><con:entry>oauth_version</con:entry><con:entry>order</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Authorize" id="2d418d9b-49e0-4479-a116-e666591d770e"><con:settings/><con:config service="https://api.xero.com" resourcePath="/oauth/Authorize" methodName="Authorize" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Authorize" id="3679aa0b-49a1-4a53-847c-879238c6dcb6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="oauth_callback" value="http%3A%2F%2Flocalhost%3A8086%2Freceivetoken"/>
  <con:entry key="oauth_signature" value="libkVApyFFDq1E+433XSrO+JCbw="/>
  <con:entry key="oauth_version" value="1.0"/>
  <con:entry key="oauth_nonce" value="1e8849a91039e283"/>
  <con:entry key="oauth_signature_method" value="HMAC-SHA1"/>
  <con:entry key="oauth_consumer_key" value="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU"/>
  <con:entry key="oauth_timestamp" value="1467939392"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>https://api.xero.com</con:endpoint><con:request/><con:originalUri>https://api.xero.com/oauth/RequestToken</con:originalUri><con:credentials><con:selectedAuthProfile>XeroOauth</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oauth_callback" value="${#TestCase#oauth_callback}"/>
  <con:entry key="oauth_signature" value="${#TestCase#oauth_signature}"/>
  <con:entry key="oauth_version" value="${#TestCase#oauth_version}"/>
  <con:entry key="oauth_nonce" value="${#TestCase#oauth_nonce}"/>
  <con:entry key="oauth_signature_method" value="${#TestCase#oauth_signature_method}"/>
  <con:entry key="oauth_consumer_key" value="${#TestCase#oauth_consumer_key}"/>
  <con:entry key="oauth_token" value="${#TestCase#tmp_oauth_token}"/>
  <con:entry key="oauth_timestamp" value="${#TestCase#oauth_timestamp}"/>
</con:parameters><con:parameterOrder><con:entry>oauth_callback</con:entry><con:entry>oauth_consumer_key</con:entry><con:entry>oauth_nonce</con:entry><con:entry>oauth_signature</con:entry><con:entry>oauth_signature_method</con:entry><con:entry>oauth_timestamp</con:entry><con:entry>oauth_version</con:entry><con:entry>order</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="HMAC-SHA1" id="5925157a-c08e-4a4c-8661-ddecbe1a53c2" disabled="true"><con:settings/><con:config><script><![CDATA[import java.nio.charset.StandardCharsets;
import java.security.SignatureException
import java.security.spec.EncodedKeySpec;
import com.eviware.soapui.support.types.StringToStringMap 
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.sql.Date.*;
import org.apache.commons.codec.binary.Base64;

def now = new Date();
def timestamp = ""+(Math.round(now.getTime()/1000)-1801);

//Parameters used to generate the signature
String user_agent = "AppDemo1";
String consumerKey ="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU"; //EORT56K6NSY9QEW8VMXVBN6VHGH60E		NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU
String consumerSecret ="AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6";
String callback ="http://localhost:8086/receivetoken";

def GetRandomString( int length)
{
	String allChar = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String letterChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String numberChar = "0123456789";

	StringBuffer sb = new StringBuffer();
	Random random = new Random();

	for (int i = 0; i < length; i++) 
	{
		sb.append(allChar.charAt(random.nextInt(allChar.length())));
	}
	return sb;
}

String oauth_consumer_key =consumerKey;
String oauth_nonce=GetRandomString(10);
String oauth_signature="";
String oauth_signature_method="HMAC-SHA1";
String oauth_timestamp=timestamp;
String oauth_version="1.0";

String signature="";


def method = "GET";
def URL = "https://api.xero.com/oauth/RequestToken";
def ParameterListStr = "oauth_callback="+callback+"&oauth_consumer_key="+consumerKey+"&oauth_nonce="+oauth_nonce+"&oauth_signature_method="+oauth_signature_method+"&oauth_timestamp="+oauth_timestamp+"&oauth_version="+oauth_version;
log.info method
log.info URL
log.info ParameterListStr
def signatureBaseString = method+"&"+URLEncoder.encode(URL)+"&"+URLEncoder.encode(ParameterListStr)
log.info signatureBaseString
/** signatureBaseString **/

def Sign(String signatureBaseString, String consumerSecret, String tokenSecret)
{
	String key = Key(consumerSecret, tokenSecret);
	def signature = SignCore(signatureBaseString, key);
	return Base64Encode(signature);
}

def Key(String consumerSecret, String tokenSecret)
{
	return Escape(consumerSecret)+"&"+Escape(tokenSecret);
}

String Escape(String what)
{
	return URLEncoder.encode(what);
}

String Base64Encode(byte[] bytes)
{
	byte[] encodedBytes = Base64.encodeBase64(bytes.getBytes());
	//log.info encodedBytes.encodeHex()
	//log.info "encodedBytes " + new String(encodedBytes)
     return new String(encodedBytes);
}

def SignCore(String text, String key)
{
	// get an hmac_sha1 key from the raw key bytes
	SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), "HmacSHA1");
			
	// get an hmac_sha1 Mac instance and initialize with the signing key
	Mac mac = Mac.getInstance("HmacSHA1");
	mac.init(signingKey);
			
	// compute the hmac on input data bytes
	String message = new StringBuilder().append (consumerKey).append (consumerSecret).append (timestamp).toString ();
			
	byte [] signatureBytes = mac.doFinal (text.getBytes(StandardCharsets.UTF_8));
	log.info signatureBytes
	signature = signatureBytes.encodeHex()
	/*
            var encoding = Encoding.ASCII;

            byte[] keyBytes = encoding.GetBytes(key);
            byte[] textBytes = encoding.GetBytes(text);

            using (var hmac = new HMACSHA1(keyBytes))
            {
                return hmac.ComputeHash(textBytes);
            }
      */
}

Sign(signatureBaseString,"NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU",consumerSecret);
/*



try {
	
	// get an hmac_sha1 key from the raw key bytes
	SecretKeySpec signingKey = new SecretKeySpec(secret.getBytes(), "HmacSHA1");
			
	// get an hmac_sha1 Mac instance and initialize with the signing key
	Mac mac = Mac.getInstance("HmacSHA1");
	mac.init(signingKey);
			
	// compute the hmac on input data bytes
	String message = new StringBuilder().append (consumerKey).append (consumerSecret).append (timestamp).toString ();
			
	byte [] signatureBytes = mac.doFinal (message.getBytes(StandardCharsets.UTF_8));
	log.info signatureBytes
	signature = signatureBytes.encodeHex()
	   
}catch (Exception e) 
{
	throw new SignatureException("Failed to generate HMAC : " + e.getMessage());
}
	 
/*
"realm"
"oauth_callback"
"oauth_consumer_key"
"oauth_nonce"
"oauth_signature_method"
"oauth_timestamp"
"oauth_token"
"oauth_verifier"
"oauth_version"
*/
/*
testRunner.testCase.setPropertyValue("oauth_signature",signature);
testRunner.testCase.setPropertyValue("oauth_timestamp",timestamp);
testRunner.testCase.setPropertyValue("oauth_callback",callback);
testRunner.testCase.setPropertyValue("oauth_consumer_key",consumerKey);
testRunner.testCase.setPropertyValue("oauth_signature_method",oauth_signature_method);
testRunner.testCase.setPropertyValue("oauth_version",oauth_version);

def headers = new StringToStringMap()
headers.put("oauth_signature",signature)
headers.put("oauth_timestamp",timestamp)
headers.put("oauth_callback",callback)
headers.put("oauth_consumer_key",consumerKey)
headers.put("oauth_signature_method",oauth_signature_method)
headers.put("oauth_version",oauth_version)
//Set the headers for that the teststep 
testRunner.testCase.getTestStepByName("RequestToken").testRequest.setRequestHeaders(headers)
*/]]></script></con:config></con:testStep><con:testStep type="groovy" name="URLEncoder" id="86909b2e-ce05-4c85-b377-4d2cbe00da7e" disabled="true"><con:settings/><con:config><script>
log.info URLEncoder.encode("http://www.da.com?a=123", "UTF-8");

log.info URLDecoder.decode("oauth_version%3D1.0");

log.info URLDecoder.decode("https%3A%2F%2Fapi.xero.com%2Foauth%2FRequestToken");

log.info URLDecoder.decode("http%3A%2F%2Flocalhost%3A8500%2Fcallback");

log.info URLDecoder.decode("oauth_callback%3Doob%26oauth_consumer_key%3DYOURCONSUMERKEYHERE%26oauth_nonce%3D38e034f9-78c0-41a1-a7b9-ae661655c212%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1455846457%26oauth_version%3D1.0");

log.info URLDecoder.decode("oauth_callback%3Dhttp%253A%252F%252Flocalhost%253A8500%252Fcallback%26oauth_consumer_key%3DHOHDXOD4UB7ONRIEOOZK4QLSOQTQWP%26oauth_nonce%3D9221F28ABE25F7B6DF9736DA112CD6E4A7AB0086%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1444311675%26oauth_version%3D1.0");

log.info URLDecoder.decode("http%3A%2F%2Flocalhost%3A8500%2Fcallback");
/*
oauth_callback=http%3A%2F%2Flocalhost%3A8500%2Fcallback
&amp;oauth_consumer_key=HOHDXOD4UB7ONRIEOOZK4QLSOQTQWP
&amp;oauth_nonce=9221F28ABE25F7B6DF9736DA112CD6E4A7AB0086
&amp;oauth_signature_method=HMAC-SHA1
&amp;oauth_timestamp=1444311675
&amp;oauth_version=1.0
*/

def now = new Date();
def timestamp = ""+(Math.round(now.getTime()/1000)-1801);
log.info timestamp
log.info Math.round(System.currentTimeMillis() / 1000)-1801;	</script></con:config></con:testStep><con:testStep type="groovy" name="Base64" id="33f43911-9f4a-4ba0-bb50-36b61dd2c34f" disabled="true"><con:settings/><con:config><script>import java.nio.charset.StandardCharsets;
import java.security.SignatureException
import java.security.spec.EncodedKeySpec;
import com.eviware.soapui.support.types.StringToStringMap 
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.sql.Date.*;
import java.net.URLEncoder;
import org.apache.commons.codec.binary.Base64;

URLEncoder.encode("http://www.da.com?a=123", "UTF-8");

byte[] encodedBytes = Base64.encodeBase64("Test".getBytes());
log.info encodedBytes.encodeHex()
log.info "encodedBytes " + new String(encodedBytes)
byte[] decodedBytes = Base64.decodeBase64(encodedBytes);
log.info "decodedBytes " + new String(decodedBytes)
log.info decodedBytes.encodeHex()


String username = "lolayan@outlook.com"
String password = "password123"

username = "admin"
password = "qweasd123"

username = "test6229435null@SoapuiTest.com"
password = "password1"

String str = username + ':' + password
byte[] authEncodedBytes = Base64.encodeBase64(str.getBytes());
log.info authEncodedBytes.encodeHex()
log.info "authEncodedBytes: Basic " + new String(authEncodedBytes)</script></con:config></con:testStep><con:properties><con:property><con:name>oauth_signature</con:name><con:value>1ajGCHvrEemmbY8uLNR7pcY0JBQ=</con:value></con:property><con:property><con:name>oauth_timestamp</con:name><con:value>1467945652</con:value></con:property><con:property><con:name>oauth_callback</con:name><con:value>http://localhost:8086/receivetoken</con:value></con:property><con:property><con:name>oauth_consumer_key</con:name><con:value>NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU</con:value></con:property><con:property><con:name>oauth_signature_method</con:name><con:value>HMAC-SHA1</con:value></con:property><con:property><con:name>oauth_version</con:name><con:value>1.0</con:value></con:property><con:property><con:name>oauth_nonce</con:name><con:value>4e192d7fbac8dc2e</con:value></con:property><con:property><con:name>tmp_oauth_token</con:name><con:value>P8LPGDILU5OCQSQCRZQ7ONIJOUKIJM</con:value></con:property><con:property><con:name>tmp_oauth_token_secret</con:name><con:value>ETGBGRBIZJEMLFOKIXK06AMVNQWGYK</con:value></con:property></con:properties></con:testCase><con:testCase id="4db4577f-ca84-49b3-80e9-5323bbb55ab1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Property file" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read property file of Core Game" id="f798509a-378e-4cdf-857b-8fdc6930b15e"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def  props = new Properties();
File propFile = new File(projectDir,'properties/LottoMuleLibrary.properties')
props.load(propFile.newDataInputStream())

def myEndpoint = props."myEndpoint"
def AuthEndpoint = props."AuthEndpoint"
def dbUrl_ESI = props."dbUrl_ESI"
def dbUName_ESI = props."dbUName_ESI"
def dbPwd_ESI = props."dbPwd_ESI"
def dbDriver_ESI = props."dbDriver_ESI"
def userName = props."userName"
def password = props."password"
def firstName = props."firstName"
def lastName = props."lastName"
def startdate = props."startdate"
def enddate = props."enddate"
def startdateTrnxHist = props."startdateTrnxHist"
def enddateTrnxHist = props."enddateTrnxHist"

testRunner.testCase.testSuite.project.setPropertyValue( 'myEndpoint',myEndpoint);
testRunner.testCase.testSuite.project.setPropertyValue( 'AuthEndpoint',AuthEndpoint);
testRunner.testCase.testSuite.project.setPropertyValue( 'dbUrl_ESI',dbUrl_ESI);
testRunner.testCase.testSuite.project.setPropertyValue( 'dbUName_ESI',dbUName_ESI);
testRunner.testCase.testSuite.project.setPropertyValue( 'dbPwd_ESI',dbPwd_ESI);
testRunner.testCase.testSuite.project.setPropertyValue( 'dbDriver_ESI',dbDriver_ESI);
testRunner.testCase.testSuite.project.setPropertyValue( 'userName',userName);
testRunner.testCase.testSuite.project.setPropertyValue( 'password',password);
testRunner.testCase.testSuite.project.setPropertyValue( 'firstName',firstName);
testRunner.testCase.testSuite.project.setPropertyValue( 'lastName',lastName);
testRunner.testCase.testSuite.project.setPropertyValue( 'startdate',startdate);
testRunner.testCase.testSuite.project.setPropertyValue( 'enddate',enddate);
testRunner.testCase.testSuite.project.setPropertyValue( 'startdateTrnxHist',startdateTrnxHist);
testRunner.testCase.testSuite.project.setPropertyValue( 'enddateTrnxHist',enddateTrnxHist);

for (Map.Entry&lt;Object, Object> e : props.entrySet()) {
  String key = (String) e.getKey();
  String value = (String) e.getValue();
  log.info key+": "+value
  testRunner.testCase.testSuite.project.setPropertyValue( key,value);
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3387cfd0-6c91-4411-9544-fae8cfe2e467" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Oauth2 Workflow" searchProperties="true"><con:description>https://developer.xero.com/documentation/getting-started/public-applications/

URLs for authorisation and using the API

Xero follows the OAuth v1.0a spec. The URL’s to authorize your application are:

Get an Unauthorised Request Token:	https://api.xero.com/oauth/RequestToken
Redirect a user:	https://api.xero.com/oauth/Authorize
Swap a Request Token for an Access Token:	https://api.xero.com/oauth/AccessToken
Connect to the Xero API:	https://api.xero.com/api.xro/2.0/…
Callback URL

When getting a request token and specifying the callback URL, the callback URL should be no more than 250 characters long.
The callback url must be within the domain specified when registering your app. Learn more
If a callback url is not specified then the user will be given an authorisation code to enter into your application.
Signing Requests

All requests need to be signed using HMAC-SHA1.

https://developer.xero.com/documentation/getting-started/oauth-issues/

ignature Invalid (signature_invalid)

This can be quite generic reason for a number of signature generation errors. The best tip here is using an up to date version of one of our recommended code samples as they take care of signature generation.

Failed to validate signature

oauth_problem=signature_invalid&amp;oauth_problem_advice=Failed to validate signature
Some possible causes:

The public-private application certificate keypair used to sign requests does not match the public key uploaded to your application in the Xero Developer Centre
The application consumer key does not match the application certificate keypair
Not all expected elements are being used to generate the signature.
Resolution: No easy way to advise on the specific issues here. Again we recommend using a code sample if possible, but if you are still stuck having gone through the possible causes above, ask a question in our developer community. A GET request requires less parts of the request to be signed – check if you can make a GET request before moving on to PUT/POST as this will help isolate the cause.

</con:description><con:settings/><con:testStep type="groovy" name="Set up header for RequestToken" id="50885dca-95d4-44c6-a690-aa4e864967d8"><con:settings/><con:config><script><![CDATA[import java.nio.charset.StandardCharsets;
import java.security.SignatureException
import java.security.spec.EncodedKeySpec;
import com.eviware.soapui.support.types.StringToStringMap 
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.sql.Date.*;
import org.apache.commons.codec.binary.Base64;

def currTimestamp = Math.round(System.currentTimeMillis() / 1000);

Random random = new Random();
def nonce=Long.toHexString(Math.abs(random.nextLong()));
	
//Parameters used to generate the signature
String user_agent = "AppDemo1";
String consumerKey ="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU";
String consumerSecret ="AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6";
String callback ="http://localhost:8086/receivetoken";
String oauth_callback = callback;
String oauth_consumer_key =consumerKey;
String oauth_nonce=nonce;
String oauth_signature="";
String oauth_signature_method="HMAC-SHA1";
String oauth_timestamp=currTimestamp-1801+"";
String oauth_version="1.0";
	
//signatureBaseString  
def method = "GET";
def URL = "https://api.xero.com/oauth/RequestToken";
def ParameterListStr = "oauth_callback="+URLEncoder.encode(oauth_callback)+"&oauth_consumer_key="+consumerKey+"&oauth_nonce="+oauth_nonce+"&oauth_signature_method="+oauth_signature_method+"&oauth_timestamp="+oauth_timestamp+"&oauth_version="+oauth_version;
log.info method
log.info URL
log.info ParameterListStr
def signatureBaseString = method+"&"+URLEncoder.encode(URL)+"&"+URLEncoder.encode(ParameterListStr)
log.info signatureBaseString

def key = consumerSecret+"&";

Mac mac = Mac.getInstance("HmacSHA1");
SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(),mac.getAlgorithm());
// get an hmac_sha1 Mac instance and initialize with the signing key
mac.init(signingKey);
byte[] digest = mac.doFinal(signatureBaseString.getBytes());
log.info digest
byte[] result=Base64.encodeBase64(digest);
log.info "result: "+new String(result)
byte [] signatureBytes = mac.doFinal (signatureBaseString.getBytes(StandardCharsets.UTF_8));
log.info signatureBytes
signature = signatureBytes.encodeHex()
oauth_signature = new String(result)
log.info oauth_signature

testRunner.testCase.setPropertyValue("oauth_signature",oauth_signature);
testRunner.testCase.setPropertyValue("oauth_nonce",oauth_nonce);
testRunner.testCase.setPropertyValue("oauth_timestamp",oauth_timestamp);
testRunner.testCase.setPropertyValue("oauth_callback",oauth_callback);
testRunner.testCase.setPropertyValue("oauth_consumer_key",oauth_consumer_key);
testRunner.testCase.setPropertyValue("oauth_signature_method",oauth_signature_method);
testRunner.testCase.setPropertyValue("oauth_version",oauth_version);

def headers = new StringToStringMap()
headers.put("oauth_callback",URLEncoder.encode(oauth_callback));
headers.put("oauth_consumer_key",oauth_consumer_key);
headers.put("oauth_nonce",oauth_nonce);
headers.put("oauth_signature",oauth_signature)
headers.put("oauth_signature_method",oauth_signature_method)
headers.put("oauth_timestamp",oauth_timestamp)
headers.put("oauth_version",oauth_version)

//Set the headers for that the teststep 
testRunner.testCase.getTestStepByName("RequestToken").testRequest.setRequestHeaders(headers)


	

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RequestToken" id="a4174633-1637-41c7-9e91-c7d7dd69c2c8"><con:settings/><con:config service="https://api.xero.com" resourcePath="/oauth/RequestToken" methodName="RequestToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RequestToken" id="3679aa0b-49a1-4a53-847c-879238c6dcb6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="oauth_callback" value="http%3A%2F%2Flocalhost%3A8086%2Freceivetoken"/>
  <con:entry key="oauth_signature" value="4p9OcvQAOTMpyAcRihsoIccwVsY="/>
  <con:entry key="oauth_nonce" value="26f49f67320be595"/>
  <con:entry key="oauth_version" value="1.0"/>
  <con:entry key="oauth_consumer_key" value="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU"/>
  <con:entry key="oauth_signature_method" value="HMAC-SHA1"/>
  <con:entry key="oauth_timestamp" value="1468377426"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>https://api.xero.com</con:endpoint><con:request/><con:originalUri>https://api.xero.com/oauth/RequestToken</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7577f54d-50c5-4c56-96b6-466bf65d016a" name="Script Assertion"><con:configuration><scriptText>def response1 = messageExchange.modelItem.testStep.getPropertyValue("response")
log.info response1
def oauth_token = response1.split("&amp;")[0]
def oauth_token_secret = response1.split("&amp;")[1]
def oauth_callback_confirmed = response1.split("&amp;")[2]
oauth_token=oauth_token.split("=")[1]
oauth_token_secret=oauth_token_secret.split("=")[1]
messageExchange.modelItem.testStep.testCase.setPropertyValue( "tmp_oauth_token",oauth_token)
messageExchange.modelItem.testStep.testCase.setPropertyValue( "tmp_oauth_token_secret",oauth_token_secret)

</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>XeroOauth</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oauth_callback" value="${#TestCase#oauth_callback}"/>
  <con:entry key="oauth_signature" value="${#TestCase#oauth_signature}"/>
  <con:entry key="oauth_nonce" value="${#TestCase#oauth_nonce}"/>
  <con:entry key="oauth_version" value="${#TestCase#oauth_version}"/>
  <con:entry key="oauth_consumer_key" value="${#TestCase#oauth_consumer_key}"/>
  <con:entry key="oauth_signature_method" value="${#TestCase#oauth_signature_method}"/>
  <con:entry key="oauth_timestamp" value="${#TestCase#oauth_timestamp}"/>
</con:parameters><con:parameterOrder><con:entry>oauth_callback</con:entry><con:entry>oauth_consumer_key</con:entry><con:entry>oauth_nonce</con:entry><con:entry>oauth_signature</con:entry><con:entry>oauth_signature_method</con:entry><con:entry>oauth_timestamp</con:entry><con:entry>oauth_version</con:entry><con:entry>order</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set up header for Authorize" id="e377918c-d9e0-45ee-9973-907aeff43d3d"><con:settings/><con:config><script><![CDATA[import java.nio.charset.StandardCharsets;
import java.security.SignatureException
import java.security.spec.EncodedKeySpec;
import com.eviware.soapui.support.types.StringToStringMap 
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.sql.Date.*;
import org.apache.commons.codec.binary.Base64;

def currTimestamp = Math.round(System.currentTimeMillis() / 1000);

Random random = new Random();
def nonce=Long.toHexString(Math.abs(random.nextLong()));
	
//Parameters used to generate the signature
String user_agent = "AppDemo1";
String consumerKey ="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU";
String consumerSecret ="AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6";
String callback ="http://localhost:8086/receivetoken";
String oauth_callback = callback;
String oauth_consumer_key =consumerKey;
String oauth_nonce=nonce;
String oauth_signature="";
String oauth_signature_method="HMAC-SHA1";
String oauth_timestamp=currTimestamp-1801+"";
String oauth_token=testRunner.testCase.getPropertyValue("tmp_oauth_token");
String oauth_token_secret=testRunner.testCase.getPropertyValue("tmp_oauth_token_secret");
String oauth_version="1.0";

def Cookie = "temptoken="+oauth_token+";temptokensecret="+oauth_token_secret+";"
log.info "Cookie:"+Cookie
//signatureBaseString  
def method = "GET";
def URL = "https://api.xero.com/oauth/Authorize";
def ParameterListStr = "oauth_callback="+URLEncoder.encode(oauth_callback)+"&oauth_consumer_key="+consumerKey+"&oauth_nonce="+oauth_nonce+"&oauth_signature_method="+oauth_signature_method+"&oauth_timestamp="+oauth_timestamp+"&oauth_token="+oauth_token+"&oauth_token_secret="+oauth_token_secret+"&oauth_version="+oauth_version;
log.info method
log.info URL
log.info ParameterListStr
def signatureBaseString = method+"&"+URLEncoder.encode(URL)+"&"+URLEncoder.encode(ParameterListStr)
log.info signatureBaseString

//Key for signer
def key = consumerSecret+"&"+oauth_token_secret;

Mac mac = Mac.getInstance("HmacSHA1");
SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(),mac.getAlgorithm());
// get an hmac_sha1 Mac instance and initialize with the signing key
mac.init(signingKey);
byte[] digest = mac.doFinal(signatureBaseString.getBytes());
log.info digest
byte[] result=Base64.encodeBase64(digest);
log.info "result: "+new String(result)
byte [] signatureBytes = mac.doFinal (signatureBaseString.getBytes(StandardCharsets.UTF_8));
log.info signatureBytes
signature = signatureBytes.encodeHex()
oauth_signature = new String(result)
log.info oauth_signature

testRunner.testCase.setPropertyValue("oauth_signature",oauth_signature);
testRunner.testCase.setPropertyValue("oauth_nonce",oauth_nonce);
testRunner.testCase.setPropertyValue("oauth_timestamp",oauth_timestamp);
testRunner.testCase.setPropertyValue("oauth_callback",oauth_callback);
testRunner.testCase.setPropertyValue("oauth_consumer_key",oauth_consumer_key);
testRunner.testCase.setPropertyValue("oauth_signature_method",oauth_signature_method);
testRunner.testCase.setPropertyValue("oauth_version",oauth_version);

def headers = new StringToStringMap()
headers.put("oauth_callback",URLEncoder.encode(oauth_callback));
headers.put("oauth_consumer_key",oauth_consumer_key);
headers.put("oauth_nonce",oauth_nonce);
headers.put("oauth_signature",oauth_signature)
headers.put("oauth_signature_method",oauth_signature_method)
headers.put("oauth_timestamp",oauth_timestamp)
headers.put("oauth_token",oauth_token)
headers.put("oauth_token_secret",oauth_token_secret)
headers.put("oauth_version",oauth_version)
headers.put("Cookie",Cookie);
//Set the headers for that the teststep 
testRunner.testCase.getTestStepByName("Authorize").testRequest.setRequestHeaders(headers)


	

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Authorize" id="893d81f0-bab3-4195-b183-847beb97fd00"><con:settings/><con:config service="https://api.xero.com" resourcePath="/oauth/Authorize" methodName="Authorize" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Authorize" id="3679aa0b-49a1-4a53-847c-879238c6dcb6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="oauth_callback" value="http%3A%2F%2Flocalhost%3A8086%2Freceivetoken"/>
  <con:entry key="Cookie" value="temptoken=GQLGPA2LNZVVTZNEKFNX5690PIEZZN;temptokensecret=SXHSTEN1RRD24KT8WBVS451NY1GCBZ;"/>
  <con:entry key="oauth_signature" value="f71TJvd7NUSZNFWmbaRjuZhQa5I="/>
  <con:entry key="oauth_version" value="1.0"/>
  <con:entry key="oauth_nonce" value="5227a0c622a010de"/>
  <con:entry key="oauth_signature_method" value="HMAC-SHA1"/>
  <con:entry key="oauth_consumer_key" value="NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU"/>
  <con:entry key="oauth_token" value="GQLGPA2LNZVVTZNEKFNX5690PIEZZN"/>
  <con:entry key="oauth_token_secret" value="SXHSTEN1RRD24KT8WBVS451NY1GCBZ"/>
  <con:entry key="oauth_timestamp" value="1468377450"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>https://api.xero.com</con:endpoint><con:request/><con:originalUri>https://api.xero.com/oauth/RequestToken</con:originalUri><con:credentials><con:selectedAuthProfile>XeroOauth</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="oauth_callback" value="${#TestCase#oauth_callback}"/>
  <con:entry key="oauth_signature" value="${#TestCase#oauth_signature}"/>
  <con:entry key="oauth_nonce" value="${#TestCase#oauth_nonce}"/>
  <con:entry key="oauth_version" value="${#TestCase#oauth_version}"/>
  <con:entry key="oauth_consumer_key" value="${#TestCase#oauth_consumer_key}"/>
  <con:entry key="oauth_signature_method" value="${#TestCase#oauth_signature_method}"/>
  <con:entry key="oauth_token" value="${#TestCase#tmp_oauth_token}"/>
  <con:entry key="oauth_timestamp" value="${#TestCase#oauth_timestamp}"/>
</con:parameters><con:parameterOrder><con:entry>oauth_callback</con:entry><con:entry>oauth_consumer_key</con:entry><con:entry>oauth_nonce</con:entry><con:entry>oauth_signature</con:entry><con:entry>oauth_signature_method</con:entry><con:entry>oauth_timestamp</con:entry><con:entry>oauth_version</con:entry><con:entry>order</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>oauth_signature</con:name><con:value>f71TJvd7NUSZNFWmbaRjuZhQa5I=</con:value></con:property><con:property><con:name>oauth_timestamp</con:name><con:value>1468377450</con:value></con:property><con:property><con:name>oauth_callback</con:name><con:value>http://localhost:8086/receivetoken</con:value></con:property><con:property><con:name>oauth_consumer_key</con:name><con:value>NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU</con:value></con:property><con:property><con:name>oauth_signature_method</con:name><con:value>HMAC-SHA1</con:value></con:property><con:property><con:name>oauth_version</con:name><con:value>1.0</con:value></con:property><con:property><con:name>oauth_nonce</con:name><con:value>5227a0c622a010de</con:value></con:property><con:property><con:name>tmp_oauth_token</con:name><con:value>GQLGPA2LNZVVTZNEKFNX5690PIEZZN</con:value></con:property><con:property><con:name>tmp_oauth_token_secret</con:name><con:value>SXHSTEN1RRD24KT8WBVS451NY1GCBZ</con:value></con:property></con:properties></con:testCase><con:testCase id="e0cb7c78-77ec-40a0-a54c-529737cf492e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DB2 Batch Query and Excel Read/Write" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Read from csv" id="c1586879-f503-44d5-bea2-cdbefc3fa680"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder 
import jxl.* 
import jxl.write.*
import groovy.sql.Sql;
 /***
 * Set up dbdriver
 */
 
// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl = "jdbc:db2://192.168.101.74:50000/ESI_DB"
def dbUName = "gtkinst1"
def dbPwd = "gtkinst1"
def dbDriver = "com.ibm.db2.jcc.DB2Driver"

// register db2 JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

/***
 * Read from xls file
 */
def myTestCase = context.testCase //myTestCase contains the test case 
def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//JXL library doesnot support .csv and .xslx formats, which is the format used by Excel-2010. hence, use Excel 97-2003 which is .xsl foramatted and is supported by JXL library. or else if you want to use excel-2010, use APACHE POI(XSSFWorkbooks) instead of JXL. For using .csv format, google for CSVReader libraries.
Workbook workbook1 = Workbook.getWorkbook(new File("C:/Data/cat120000users.xls")) //file containing the data
//"cat120000users"
Sheet sheet1 = workbook1.getSheet(0) //save the first sheet in sheet1
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

/*
Cell ticketNumber = sheet1.getCell(1,counter) 
Cell OpenTicketNumber = sheet1.getCell(2,counter) 
Cell CompleteTicketNumber = sheet1.getCell(3,counter) 
Cell FavNumber = sheet1.getCell(4,counter) 
workbook1.close() //close the file
*/

/***
 	* New Write File
 	*/
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

def projectDir = groovyUtils.projectPath
def resultDir = new File(projectDir+"/data");
def resultsFile = new File(resultDir, "cat1_20000_users_lotto.csv");
if(!resultDir.exists()) 
{
	resultDir.mkdirs();
	

	//Header values
	resultsFile.append('"Email","LottoTicketNumber","OpenLottoTicketNumber","CompleteLottoTicketNumber","LottoFavNumber"');
	resultsFile.append('\n');
}
	
/***
 	* Loop data source
 	*/
def max = size-1;
for(i=0;i&lt;max;i++)
{
	log.info "...................No.:"+i;
	Cell email = sheet1.getCell(0,i);
	emailStr = email.getContents();
	log.info emailStr
	def sqlTicketNoStr = '''
	SELECT COUNT(*)
	FROM NZDEV.ES_SECURITY
	LEFT JOIN NZDEV.ESI_TICKET_INFO
	ON NZDEV.ESI_TICKET_INFO.USER_ID = NZDEV.ES_SECURITY.USER_ID
	LEFT JOIN NZDEV.ESI_TICKET_DETAILS
	ON NZDEV.ESI_TICKET_INFO.TICKET_SERIAL_NO = NZDEV.ESI_TICKET_DETAILS.TICKET_SERIAL_NO
	LEFT JOIN NZDEV.ES_LINE_ITEMS
	ON NZDEV.ES_LINE_ITEMS.ORDER_ID = NZDEV.ESI_TICKET_DETAILS.ORDER_ID
	WHERE NZDEV.ES_SECURITY.USER_NAME = \''''+emailStr+"\'  AND NZDEV.ESI_TICKET_INFO.GAME_ID IN  ( '20','12','2')";
	def sqlOpenTicketNoStr = sqlTicketNoStr +" AND NZDEV.ES_LINE_ITEMS.ITEM_FULFILL_ST_ID = 'PURCH' ";
	log.info sqlOpenTicketNoStr
	def ticketNumber = con.rows(sqlTicketNoStr);
	ticketNumber = ticketNumber[0][0]

	if(ticketNumber == 0)
	{
		OpenTicketNumber =0;
		completeTicketNumber =0;
	}else
	{
		OpenTicketNumber = con.rows(sqlOpenTicketNoStr);
		OpenTicketNumber=OpenTicketNumber[0][0];
		completeTicketNumber = ticketNumber - OpenTicketNumber;
	}

	log.info "ticketNumber: "+ticketNumber
	log.info "OpenTicketNumber: "+OpenTicketNumber
	log.info "completeTicketNumber: "+completeTicketNumber

	def sqlFavNoStr = '''
	SELECT COUNT(*)
	FROM NZDEV.ES_SECURITY
	LEFT JOIN NZDEV.ESI_NZ_FAVOURITES
	ON NZDEV.ESI_NZ_FAVOURITES.USER_ID = NZDEV.ES_SECURITY.USER_ID
	WHERE NZDEV.ES_SECURITY.USER_NAME =  \''''+emailStr+"\' and NZDEV.ESI_NZ_FAVOURITES.GAME_NAME LIKE 'Lotto%'";
	log.info sqlFavNoStr
	def FavNumber = con.rows(sqlFavNoStr);
	FavNumber = FavNumber[0][0]
	log.info "FavNumber: "+ FavNumber

	/***
 	* Write into file
 	*/
 	
	resultsFile.append(emailStr+","+ticketNumber+","+OpenTicketNumber+","+completeTicketNumber+","+FavNumber);
	resultsFile.append('\n');
}


/*

*/</script></con:config></con:testStep><con:testStep type="groovy" name="Read from csv Lotto" id="fabab091-f104-4cd8-9542-5624274d5281"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder 
import jxl.* 
import jxl.write.*
import groovy.sql.Sql;
 /***
 * Set up dbdriver
 */
 
// Get db connection parameters: dbUrl, dbUName, dbPwd.
def dbUrl = "jdbc:db2://192.168.101.74:50000/ESI_DB"
def dbUName = "gtkinst1"
def dbPwd = "gtkinst1"
def dbDriver = "com.ibm.db2.jcc.DB2Driver"

// register db2 JDBC driver
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( dbDriver );
def  con = Sql.newInstance(dbUrl, dbUName, dbPwd, dbDriver);

/***
 * Read from xls file
 */
def myTestCase = context.testCase //myTestCase contains the test case 
def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//JXL library doesnot support .csv and .xslx formats, which is the format used by Excel-2010. hence, use Excel 97-2003 which is .xsl foramatted and is supported by JXL library. or else if you want to use excel-2010, use APACHE POI(XSSFWorkbooks) instead of JXL. For using .csv format, google for CSVReader libraries.
Workbook workbook1 = Workbook.getWorkbook(new File("C:/Data/cat120000users.xls")) //file containing the data
//"cat120000users"
Sheet sheet1 = workbook1.getSheet(0) //save the first sheet in sheet1
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

/*
Cell ticketNumber = sheet1.getCell(1,counter) 
Cell OpenTicketNumber = sheet1.getCell(2,counter) 
Cell CompleteTicketNumber = sheet1.getCell(3,counter) 
Cell FavNumber = sheet1.getCell(4,counter) 
workbook1.close() //close the file
*/

/***
 	* New Write File
 	*/
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

def projectDir = groovyUtils.projectPath
def resultDir = new File(projectDir+"/data");

def resultsFileLottoTickets = new File(resultDir, "cat1_20000_users_LottoTickets.csv");

def resultsFileLottoFav = new File(resultDir, "cat1_20000_users_LottoFav.csv");


if(!resultDir.exists()) 
{
	resultDir.mkdirs();
}

if(!resultsFileLottoTickets.exists()) {
	resultsFileLottoTickets.createNewFile();
	//Header values
	resultsFileLottoTickets.append('"Email","LottoTicketNumber","OpenLottoTicketNumber","CompleteLottoTicketNumber"');
	resultsFileLottoTickets.append('\n');

}

if(!resultsFileLottoFav.exists()) {
	resultsFileLottoFav.createNewFile();
	//Header values
	resultsFileLottoFav.append('"Email","LottoFavNumber"');
	resultsFileLottoFav.append('\n');
}

/***
 	* Loop data source
 	*/
def max = size-1;
for(i=1;i&lt;=max;i++)
{
	log.info "...................No.:"+i;
	Cell email = sheet1.getCell(0,i);
	emailStr = email.getContents();
	log.info emailStr
	def sqlTicketNoStr = '''
	SELECT DISTINCT COUNT(NZDEV.ESI_TICKET_DETAILS.ORDER_ID)
	FROM NZDEV.ES_SECURITY
	LEFT JOIN NZDEV.ESI_TICKET_INFO
	ON NZDEV.ESI_TICKET_INFO.USER_ID = NZDEV.ES_SECURITY.USER_ID
	LEFT JOIN NZDEV.ESI_TICKET_DETAILS
	ON NZDEV.ESI_TICKET_INFO.TICKET_SERIAL_NO = NZDEV.ESI_TICKET_DETAILS.TICKET_SERIAL_NO
	LEFT JOIN NZDEV.ES_LINE_ITEMS
	ON NZDEV.ES_LINE_ITEMS.ORDER_ID = NZDEV.ESI_TICKET_DETAILS.ORDER_ID
	WHERE NZDEV.ES_SECURITY.USER_NAME = \''''+emailStr+"\'  AND NZDEV.ESI_TICKET_INFO.GAME_ID IN  ( '20','12','2')";
	def sqlOpenTicketNoStr = sqlTicketNoStr +" AND NZDEV.ES_LINE_ITEMS.ITEM_FULFILL_ST_ID = 'PURCH' ";
	log.info sqlOpenTicketNoStr
	def ticketNumber = con.rows(sqlTicketNoStr);
	ticketNumber = ticketNumber[0][0]

	if(ticketNumber == 0)
	{
		OpenTicketNumber =0;
		completeTicketNumber =0;
	}else
	{
		OpenTicketNumber = con.rows(sqlOpenTicketNoStr);
		OpenTicketNumber=OpenTicketNumber[0][0];
		completeTicketNumber = ticketNumber - OpenTicketNumber;
	}

	log.info "ticketNumber: "+ticketNumber
	log.info "OpenTicketNumber: "+OpenTicketNumber
	log.info "completeTicketNumber: "+completeTicketNumber

	def sqlFavNoStr = '''
	SELECT COUNT(*)
	FROM NZDEV.ES_SECURITY
	LEFT JOIN NZDEV.ESI_NZ_FAVOURITES
	ON NZDEV.ESI_NZ_FAVOURITES.USER_ID = NZDEV.ES_SECURITY.USER_ID
	WHERE NZDEV.ES_SECURITY.USER_NAME =  \''''+emailStr+"\' and NZDEV.ESI_NZ_FAVOURITES.GAME_NAME LIKE 'Lotto%'";
	log.info sqlFavNoStr
	def FavNumber = con.rows(sqlFavNoStr);
	FavNumber = FavNumber[0][0]
	log.info "FavNumber: "+ FavNumber

	/***
 	* Write into file
 	*/
 	if(ticketNumber>0)
 	{
 		resultsFileLottoTickets.append(emailStr+","+ticketNumber+","+OpenTicketNumber+","+completeTicketNumber);
		resultsFileLottoTickets.append('\n');
 	}

	if(FavNumber>0)
 	{
 		resultsFileLottoFav.append(emailStr+","+FavNumber);
		resultsFileLottoFav.append('\n');
 	}
 	
}


/*

*/</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="25d9a981-eca3-4c2a-9b8e-2c9c8aed6d1f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Mock Service Scripts" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Post Request Script - txt" id="6a4f41aa-4355-4642-bca8-b53619427ab4"><con:settings/><con:config><script>import java.util.Date;
import java.text.SimpleDateFormat;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");
def projectDir = groovyUtils.projectPath
//Create Path
def resultDir = new File(projectDir+"/data");
if(!resultDir.exists()) 
{
	resultDir.mkdirs();
}
//Create Folder/File
def resultsFile = new File(resultDir,'MockSeriveMonitor.txt')
if(!resultsFile.exists()) {
	resultsFile.createNewFile();
	resultsFile.write("");
}

//Collect Time Data
Date today = new Date();
String todayTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today);
log.info todayTime;

//Collect Request and Response Data
request = mockResult.getMockRequest() 
response = mockResult.getMockResponse() 
requestHeader = "Request Header Info : "+request.getHttpRequest() 
requestBody = "Request Content Info : "+request.getRequestContent() 
requestHeader = "Request Method Info : "+request.getMethod()
requestBody = "Request Path Info : "+request.getPath()
responseHeader = "Response Header Info: "+request.getHttpResponse() 
responseBody = "Response Content Info: "+ mockResult.getResponseContent() 
tag = "----------------------Request &amp; Response Info @ "+todayTime+"----------------------"
log.info tag
log.info requestHeader
log.info requestBody
log.info responseHeader
log.info responseBody

//Write the data
resultsFile.append(tag+'\r\n');
resultsFile.append(requestHeader+'\r\n');
resultsFile.append(requestBody+'\r\n\r\n');
resultsFile.append(responseHeader+'\r\n');
resultsFile.append(responseBody+'\r\n\r\n');

</script></con:config></con:testStep><con:testStep type="groovy" name="Post Request Script - csv" id="0b9d7d84-b2b0-45b7-a0ed-970fb4af5bed"><con:settings/><con:config><script>import java.util.Date;
import java.text.SimpleDateFormat;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");
def projectDir = groovyUtils.projectPath
//Create Path
def resultDir = new File(projectDir+"/data");
if(!resultDir.exists()) 
{
	resultDir.mkdirs();
}
//Create Folder/File
def resultsFile = new File(resultDir,'MockSeriveMonitor_All.csv')
def resultsFile_Phone = new File(resultDir,'MockSeriveMonitor_Phone.csv')
if(!resultsFile.exists() ) {
	resultsFile.createNewFile();
	resultsFile.write("");
}
if(!resultsFile_Phone.exists() ) {
	resultsFile_Phone.createNewFile();
	resultsFile_Phone.write("");
}
//Collect Time Data
Date today = new Date();
String todayTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today);
log.info todayTime;

//Collect Request and Response Data
request = mockResult.getMockRequest() 
response = mockResult.getMockResponse() 
requestHeader = request.getHttpRequest() 
requestBody = request.getRequestContent() 
//"Request Method Info : "+
requestMethod = request.getMethod()
//"Request Path Info : "+
requestpath = request.getPath()
requestQueryString= request.getRequest().getQueryString()
//"Response Header Info: "+
responseHeader = request.getHttpResponse() 
//"Response Content Info: "+
responseBody =  mockResult.getResponseContent() 
tag = "-----@ "+todayTime+"----------------------"
log.info tag
log.info "Request Header Info : "+requestHeader
log.info "Request Content Info : "+requestBody
log.info "Response Header Info: "+responseHeader
log.info "Response Content Info: "+responseBody

//Record all data
resultsFile.append(tag+'\r\n');
resultsFile.append("Request Header Info : "+requestHeader+'\r\n');
resultsFile.append("Request Content Info : "+requestBody+'\r\n');
resultsFile.append("Response Header Info: "+responseHeader+'\r\n');
resultsFile.append("Response Content Info: "+responseBody+'\r\n');

//Record certain data
def phone = requestQueryString.replaceFirst( /.*to=(\w+).*/, '$1' )
log.info "phone:"+phone
resultsFile_Phone.append("@"+todayTime+" "+requestMethod+" "+requestpath+' Phone:'+phone+'\r\n');
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="617034d7-d2e2-4239-a419-940856668d6d" name="TestSuite of Mock Account Login Service"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f87a75df-b21c-4e70-834d-ed975a1d0dc3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set up endpoints" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set up endpoint" id="f54b15a4-770c-46d1-aaa9-e333e804ca7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

/*
 @Description : Setting the endpoint URL of all the REST Test Step of current test suite
*/

// Read the endpoint from Project Endpoint ${#Project#AuthEndpoint}
def endpoint = testRunner.testCase.testSuite.getPropertyValue( 'myEndpoint');
def endpoint2 = testRunner.testCase.testSuite.getPropertyValue('myEndpoint');

/*
//SIT Non-AUTH Endpoint
CoreGameEndpoint="http://192.168.224.195"
endpoint = "http://192.168.224.249"
dbUrl = "jdbc:db2://192.168.225.66:50000/ESI_DB"
*/

//Get current test suite
def testSuite = testRunner.testCase.testSuite

//Get all the test case list of current test suite
testCaseList = testSuite.getTestCases()

// Loop all the test cases in the testcase list
testCaseList.each
{
	testCase = testSuite.getTestCaseByName(it.key)
	log.info "  Test case name:"+testCase.name

	//Get all the test steps list of current test case
	wsdlTestSteps = testCase.getTestStepsOfType( com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep.class )  //only WsdlTestRequest steps
	wsdlTestSteps.each
	{

		RestTestStepEndponit = it.properties['Endpoint'].value
		log.info it.name+"    RestTestStepEndponit: " + RestTestStepEndponit
		
		testStepName = it.name
		if( testStepName == "Login" || testStepName == "Logout")
		{
			it.properties['Endpoint'].value = endpoint			
		}else
		{
			it.properties['Endpoint'].value = endpoint			
		}
	}
}
  
log.info "All the endpoints of "+testSuite.name+" are now : "+endpoint
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="490c8ee9-c41c-4b70-9624-bb9421e0b8f0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Login > Ping > Logout" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Login - Login sucessfully" id="d515cae1-68cf-48a8-81ff-2217697672b8"><con:settings/><con:config service="http://api.mockservice.co.nz" resourcePath="/account/login" methodName="Login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Login - Login sucessfully" id="fbe995a6-ed9c-40de-af05-9dd777b7a982" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8999</con:endpoint><con:request>{
  "username": "LolaYan@test.com",
  "password": "password1"
}</con:request><con:originalUri>http://localhost/account/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b91e0a38-7b95-4269-b526-6653a9574b5c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="11e87631-4c8b-4ac8-9b18-07f419fcfed6" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

/* Using JsonSlurpe to get the json response body */
def responseString = messageExchange.modelItem.testStep.getPropertyValue("response");
def jsonSlurper = new JsonSlurper();
def ResponseBodyObject = jsonSlurper.parseText(responseString);

/* Get response header */
def ResponseHeader = messageExchange.getResponseHeaders();
def SessionId = messageExchange.getResponseHeaders()["SessionId"][0];

/* Set up parameters */
def Result = ResponseBodyObject.Result;
def LoginTime = ResponseBodyObject.LoginTime;
def UserId = ResponseBodyObject.UserId;

assert Result != null;
assert LoginTime != null;
assert UserId != null;

if(UserId &amp;&amp; SessionId){
	/* Print parameters */
	log.info "UserId: " + UserId;
	log.info "SessionId: " + SessionId;
	log.info "Result: " + Result;
	log.info "LoginTime: " + LoginTime;

	/* Set up properties */
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "SessionId",SessionId.toString());
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "Result",Result.toString());
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "LoginTime",LoginTime.toString());
	messageExchange.modelItem.testStep.testCase.setPropertyValue( "UserId",UserId.toString());
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reply_callback" value="http" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Ping Sessionid" id="fdaf7fb1-d716-4188-8d29-946827bc1d3c"><con:settings/><con:config service="http://api.mockservice.co.nz" resourcePath="/account/ping" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Ping Sessionid" id="3d1e4166-e4d7-44d0-83ec-21c83f24b910" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SessionId" value="${#TestCase#SessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:8999</con:endpoint><con:request/><con:originalUri>http://192.168.100.15/account/account/ping</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="userid" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>userid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Logout - Logout successfully" id="cc04f17a-d4ed-4f3a-86dc-85adf29e6e79"><con:settings/><con:config service="http://api.mockservice.co.nz" resourcePath="/account/logout" methodName="Logout" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Logout - Logout successfully" id="9e2263c4-038e-475e-a7d1-75bb931571c9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SessionId" value="${#TestCase#SessionId}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:8999</con:endpoint><con:request/><con:originalUri>http://localhost/account/logout</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="147d5271-20a6-4550-9ec8-cc7ce7f20335" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="userid" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>userid</con:entry><con:entry>sessionid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value>55737447</con:value></con:property><con:property><con:name>SessionId</con:name><con:value>71e44644-6f49-40be-bd75-63d07526a4c2</con:value></con:property><con:property><con:name>Result</con:name><con:value>Login Successfully</con:value></con:property><con:property><con:name>LoginTime</con:name><con:value>2016-09-27 16:03:21</con:value></con:property></con:properties></con:testCase><con:testCase id="310e131b-1571-4b91-b2bd-eeccbc93b31b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Login with Wrong Password" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Login - Login sucessfully" id="47cafae9-d6d0-4009-ae37-ac5da11ad44b"><con:settings/><con:config service="http://api.mockservice.co.nz" resourcePath="/account/login" methodName="Login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Login - Login sucessfully" id="fbe995a6-ed9c-40de-af05-9dd777b7a982" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8999</con:endpoint><con:request>{
  "username": "LolaYan@test.com",
  "password": "wrongpassword"
}</con:request><con:originalUri>http://localhost/account/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b91e0a38-7b95-4269-b526-6653a9574b5c" name="Valid HTTP Status Codes"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reply_callback" value="http://test.com" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reply_callback</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value>40831342</con:value></con:property><con:property><con:name>SessionId</con:name><con:value>9b4dc499-1db3-4587-a03a-e455f9aacffe</con:value></con:property><con:property><con:name>Result</con:name><con:value>Login Successfully</con:value></con:property><con:property><con:name>LoginTime</con:name><con:value>2016-09-27 16:01:58</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>myEndpoint</con:name><con:value>http://localhost:8999</con:value></con:property></con:properties></con:testSuite><con:restMockService id="7540d812-da13-45c3-a432-90b3cbe74e6d" port="8999" path="/" host="LCAKINTW0714" name="REST MockService - User Account Login Service" docroot=""><con:settings/><con:properties/><con:onRequestScript/><con:afterRequestScript>import java.util.Date;
import java.text.SimpleDateFormat;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def currentDate = new Date().format("yyyy-MM-dd hh:mm:ss");
def projectDir = groovyUtils.projectPath
//Create Path
def resultDir = new File(projectDir+"/data");
if(!resultDir.exists()) 
{
	resultDir.mkdirs();
}
//Create Folder/File
def resultsFile = new File(resultDir,'MockSeriveMonitor_All.csv')
def resultsFile_Phone = new File(resultDir,'MockSeriveMonitor_Phone.csv')
if(!resultsFile.exists() ) {
	resultsFile.createNewFile();
	resultsFile.write("");
}
if(!resultsFile_Phone.exists() ) {
	resultsFile_Phone.createNewFile();
	resultsFile_Phone.write("");
}
//Collect Time Data
Date today = new Date();
String todayTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today);
log.info todayTime;

//Collect Request and Response Data
request = mockResult.getMockRequest() 
response = mockResult.getMockResponse() 
requestHeader = request.getHttpRequest() 
requestBody = request.getRequestContent() 
//"Request Method Info : "+
requestMethod = request.getMethod()
//"Request Path Info : "+
requestpath = request.getPath()
requestQueryString= request.getRequest().getQueryString()
//"Response Header Info: "+
responseHeader = request.getHttpResponse() 
//"Response Content Info: "+
responseBody =  mockResult.getResponseContent() 
tag = "-----@ "+todayTime+"----------------------"
log.info tag
log.info "Request Header Info : "+requestHeader
log.info "Request Content Info : "+requestBody
log.info "Response Header Info: "+responseHeader
log.info "Response Content Info: "+responseBody

//Record all data
resultsFile.append(tag+'\r\n');
resultsFile.append("Request Header Info : "+requestHeader+'\r\n');
resultsFile.append("Request Content Info : "+requestBody+'\r\n');
resultsFile.append("Response Header Info: "+responseHeader+'\r\n');
resultsFile.append("Response Content Info: "+responseBody+'\r\n');

//Record certain data
def phone = requestQueryString.replaceFirst( /.*to=(\w+).*/, '$1' )
log.info "phone:"+phone
resultsFile_Phone.append("@"+todayTime+" "+requestMethod+" "+requestpath+' Phone:'+phone+'\r\n');
</con:afterRequestScript><con:restMockAction name="/account/login" method="POST" resourcePath="/account/login" id="2a1a4d7c-fce7-47bb-8eab-7a9b2ebfb789"><con:settings/><con:defaultResponse>200 Login Success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}

// Match based on request body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody
log.info "Request content: " + mockRequest.requestContent
if(requestBody.contains("wrongpassword") )
{
	// return the name of the response you want to dispatch
     return "401 Invalid Credential";   
    
}else if( requestBody.contains("username") &amp;&amp; requestBody.contains("password")  )
{
    // return the name of the response you want to dispatch    
    return "200 Login Success";
}else
{
	log.info "queryString is null";
	return "400 Missing Parameters";
}
</con:dispatchPath><con:response name="200 Login Success" id="306bffc1-3097-41e4-a484-90611ae23c9d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.json.simple.JSONObject;

def GetRandomNumber(min,max)
{
	def n=Math.abs(new Random().nextInt() % (max-min)) + min;
	return n;
}


def GetRandomString( int length)
{
	String allChar = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String letterChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String numberChar = "0123456789";

	StringBuffer sb = new StringBuffer();
	Random random = new Random();

	for (int i = 0; i &lt; length; i++) 
	{
		sb.append(allChar.charAt(random.nextInt(allChar.length())));
	}
	return sb;
}

def uid=GetRandomNumber(10000000,99999999).toString();
log.info uid;
context.setProperty("userId",uid);


def guidVal = "${java.util.UUID.randomUUID()}";

def sessionId = GetRandomString(30).toString();
sessionId = guidVal.toString();
log.info sessionId;
context.setProperty("SessionId",sessionId);

Date today = new Date();
String todayTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today);
log.info todayTime;
context.setProperty("sendTime",todayTime);

JSONObject obj = new JSONObject();
obj.put("Result", "Login Successfully");
obj.put("UserId", uid.toInteger());
obj.put("LoginTime", todayTime);
def response = obj.toString();
context.setProperty("responseMsg",response);
log.info response;</con:script><con:responseContent>${responseMsg}</con:responseContent><con:header><con:name>SessionId</con:name><con:value>${SessionId}</con:value></con:header></con:response><con:response name="401 Invalid Credential" id="994b74ee-0c97-40ed-8708-25e8ef51f019" httpResponseStatus="401"><con:settings/><con:script>import org.json.simple.JSONObject;

JSONObject obj = new JSONObject();
obj.put("Error", "401");
obj.put("Message", "Invalid Credentials");

def response = obj.toString();
context.setProperty("responseMsg",response);
log.info response;</con:script><con:responseContent>${responseMsg}</con:responseContent></con:response><con:response name="400 Missing Parameters" id="9bd0141a-f27c-4d08-9350-574d3c8a693d" httpResponseStatus="400"><con:settings/><con:script>import org.json.simple.JSONObject;

JSONObject obj = new JSONObject();
obj.put("Error", "400");
obj.put("Message", "Missing Parameters");

def response = obj.toString();
context.setProperty("responseMsg",response);
log.info response;</con:script><con:responseContent>${responseMsg}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/account/logout" method="DELETE" resourcePath="/account/logout" id="344bf49a-2978-44ca-9fa3-b01afa143d4b"><con:settings/><con:defaultResponse>400 Missing Parameters</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
def SessionId = mockRequest.getHttpRequest().getHeader("SessionId")  

log.info "QueryString: " + queryString

if( queryString.contains("sessionid=123456") )
{
    // return the name of the response you want to dispatch
    return "401 Invalid Credential";
}
else if( SessionId!=null &amp;&amp; queryString.contains("userid") )
{
    // return the name of the response you want to dispatch
    
    return "200 Logout Success";
}else
{
	return "400 Missing Parameters"
	
}

/*
// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="200 Logout Success" id="467e4f69-f56b-4c36-9ca0-4f014ed31682" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.json.simple.JSONObject;

def GetRandomNumber(min,max)
{
	def n=Math.abs(new Random().nextInt() % (max-min)) + min;
	return n;
}


def GetRandomString( int length)
{
	String allChar = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String letterChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String numberChar = "0123456789";

	StringBuffer sb = new StringBuffer();
	Random random = new Random();

	for (int i = 0; i &lt; length; i++) 
	{
		sb.append(allChar.charAt(random.nextInt(allChar.length())));
	}
	return sb;
}

def uid=GetRandomNumber(10000000,99999999).toString();
log.info uid;
context.setProperty("userId",uid);

def sessionId = GetRandomString(30).toString();
log.info sessionId;
context.setProperty("SessionId",sessionId);

Date today = new Date();
String todayTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today);
log.info todayTime;
context.setProperty("sendTime",todayTime);

JSONObject obj = new JSONObject();
obj.put("Result", "Logout Successfully");
obj.put("UserId", uid.toInteger());
obj.put("LoginTime", todayTime);
def response = obj.toString();
context.setProperty("responseMsg",response);
log.info response;</con:script><con:responseContent>${responseMsg}</con:responseContent></con:response><con:response name="401 Invalid Credential" id="45654d33-57c8-4841-9ecc-6d1bb4ca4429" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:script>import org.json.simple.JSONObject;

JSONObject obj = new JSONObject();
obj.put("Error", "401");
obj.put("Message", "Invalid Session");

def response = obj.toString();
context.setProperty("responseMsg",response);
log.info response;</con:script><con:responseContent>${responseMsg}</con:responseContent></con:response><con:response name="400 Missing Parameters" id="db9b0c31-01c2-4a58-9579-9fbbc447c31c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/account/ping" method="POST" resourcePath="/account/ping" id="ca06f31c-a8e1-45de-bf73-e2dccfc42680"><con:settings/><con:defaultResponse>200 Ping Successful</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


def SessionId = mockRequest.getHttpRequest().getHeader("SessionId")  
// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("sessionid=123456") )
{
    // return the name of the response you want to dispatch
    return "401 Invalid Sessionid";
}
else if( SessionId!=null &amp;&amp; queryString.contains("userid") )
{
    // return the name of the response you want to dispatch
    
    return "200 Ping Successful";
}else
{
	return "400 Missing Parameters"
	
}

/*
// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="200 Ping Successful" id="b493a91c-a27d-4360-bf01-78e00181863b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.json.simple.JSONObject;

def GetRandomNumber(min,max)
{
	def n=Math.abs(new Random().nextInt() % (max-min)) + min;
	return n;
}


def GetRandomString( int length)
{
	String allChar = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String letterChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	String numberChar = "0123456789";

	StringBuffer sb = new StringBuffer();
	Random random = new Random();

	for (int i = 0; i &lt; length; i++) 
	{
		sb.append(allChar.charAt(random.nextInt(allChar.length())));
	}
	return sb;
}

def uid=GetRandomNumber(10000000,99999999).toString();
log.info uid;
context.setProperty("userId",uid);

def sessionId = GetRandomString(30).toString();
log.info sessionId;
context.setProperty("SessionId",sessionId);

Date today = new Date();
String todayTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(today);
log.info todayTime;
context.setProperty("sendTime",todayTime);

JSONObject obj = new JSONObject();
obj.put("Result", "Ping Successfully");
obj.put("UserId", uid.toInteger());
obj.put("Ping Time", todayTime);
def response = obj.toString();
context.setProperty("responseMsg",response);
log.info response;</con:script><con:responseContent>${responseMsg}</con:responseContent></con:response><con:response name="401 Invalid Sessionid" id="7e1445b9-68f1-47a0-a132-40bfc2205918" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{"error":"invalid sid"}</con:responseContent></con:response><con:response name="400 Missing Parameters" id="ce7d041e-5b18-437c-b290-cd3ede219acd" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{"Error":"400","Message":"Missing Parameters"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="041e717e-fbad-4698-b5b1-f4eda947c5b4" port="8086" path="/" host="LCAKINTW0714" name="OAuth Callback Mock Service" docroot=""><con:settings/><con:properties/><con:restMockAction name="/receivetoken" method="GET" resourcePath="/receivetoken" id="a68d482e-6b7b-44c9-a728-c473a00370ee"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>XeroOauth</con:name><con:clientID>NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU</con:clientID><con:clientSecret>AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6</con:clientSecret><con:authorizationURI>https://api.xero.com/oauth/Authorize</con:authorizationURI><con:accessTokenURI>https://api.xero.com/oauth/RequestToken</con:accessTokenURI><con:redirectURI>http://localhost:8086/receivetoken</con:redirectURI><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:accessTokenStatus xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:oAuth2Profile><con:oAuth2Profile><con:name>XeroOauth1</con:name><con:clientID>NN2UXHFSN9BKVUJ0VQT6YF31ZNWSHU</con:clientID><con:clientSecret>AJBXRTVGBZ4YOPRI8QAWBWPYA50RX6</con:clientSecret><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod></con:oAuth2Profile></con:oAuth2ProfileContainer><con:sensitiveInformation/></con:soapui-project>